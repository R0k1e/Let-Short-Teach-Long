{"id": 11, "generator": "claude-3-sonnet-20240229", "position": "Level 0 Node 0", "flag": "normal", "question": {"question": "How does the excerpt describe the process of managing events within the MySQL database environment, including the key aspects of event creation, modification, execution, and the underlying infrastructure?", "questionCategory": "summary", "comprehension": "semantic"}, "answer": "The provided excerpt describes the process of managing events within the MySQL database environment, covering key aspects such as event creation, modification, execution, and the underlying infrastructure. Here are the detailed points:\n\n1. Event Scheduler State Management:\n- The `switch_event_scheduler_state` function is responsible for enabling or disabling the event scheduler based on the provided state (`EVENTS_ON` or `EVENTS_OFF`).\n- It checks if the event scheduler is disabled via configuration options (`opt_event_scheduler` and `--skip-grant-tables`).\n- If the scheduler is not disabled, it starts or stops the scheduler using the `start` or `stop` methods of the `scheduler` component.\n- It updates the `opt_event_scheduler` option with the new state.\n- The function is synchronized using a mutex lock (`LOCK_event_metadata`).\n\n2. Event Loading from Database:\n- The `load_events_from_db` function loads events from the `mysql.event` table in the database.\n- It opens the `mysql.event` table for reading and iterates over each row to load the event details.\n- For each event, it creates an `Event_queue_element` instance and loads the event data from the row.\n- It checks if the event has the `ON_COMPLETION_DROP` option set and removes the corresponding row from the table if the option is enabled.\n- After loading all events, it reports the number of loaded events.\n- The function is executed within the context of a specific THD (thread), and access control checks are performed to ensure proper privileges.\n\n3. Event Queue and Scheduling:\n- The code references the `Event_queue` and `Event_scheduler` components, which are likely responsible for managing the event execution queue and scheduling events.\n- The `Event_queue_element` class represents an individual event in the queue.\n\n4. Event Storage and Repository:\n- The `db_repository` component is mentioned, which is likely responsible for storing and retrieving event definitions from the database.\n\n5. Error Handling and Access Control:\n- The code includes various error handling mechanisms, such as checking for system table errors and reporting unsupported features.\n- It performs access control checks to ensure proper privileges for event management operations.\n\n6. Locking and Synchronization:\n- The code uses a mutex lock (`LOCK_event_metadata`) to synchronize access to the event metadata and ensure thread-safety during event management operations.\n\n7. Debugging and Monitoring:\n- The code includes references to functions like `dump_internal_status`, which likely provide information about the current state of the event scheduler and event queue for debugging and monitoring purposes.\n\nOverall, the excerpt provides a comprehensive view of the event management infrastructure in MySQL, covering the creation, loading, execution, scheduling, storage, and initialization of events, as well as error handling, access control mechanisms, and synchronization techniques. However, it does not provide detailed information about event modification, deletion, or other aspects like expression reconstruction or schema event listing.", "length": 7673, "text": "// language: C++\n#include \"mysql_priv.h\"\n#include \"events.h\"\n#include \"event_data_objects.h\"\n#include \"event_db_repository.h\"\n#include \"event_queue.h\"\n#include \"event_scheduler.h\"\nstatic const char *opt_event_scheduler_state_names[]=\n    { \"OFF\", \"ON\", \"0\", \"1\", \"DISABLED\", NullS };\n\nconst TYPELIB Events::opt_typelib=\n{\n  array_elements(opt_event_scheduler_state_names)-1,\n  \"\",\n  opt_event_scheduler_state_names,\n  NULL\n};\nstatic const char *var_event_scheduler_state_names[]= { \"OFF\", \"ON\", NullS };\n\nconst TYPELIB Events::var_typelib=\n{\n  array_elements(var_event_scheduler_state_names)-1,\n  \"\",\n  var_event_scheduler_state_names,\n  NULL\n};\n\nEvent_queue *Events::event_queue;\nEvent_scheduler *Events::scheduler;\nEvent_db_repository *Events::db_repository;\nenum Events::enum_opt_event_scheduler\nEvents::opt_event_scheduler= Events::EVENTS_OFF;\npthread_mutex_t Events::LOCK_event_metadata;\nbool Events::check_system_tables_error= FALSE;\nint sortcmp_lex_string(LEX_STRING s, LEX_STRING t, CHARSET_INFO *cs)\n{\n return cs->coll->strnncollsp(cs, (uchar *) s.str,s.length,\n                                  (uchar *) t.str,t.length, 0);\n}\nbool\nEvents::set_opt_event_scheduler(char *argument)\n{\n  if (argument == NULL)\n    opt_event_scheduler= Events::EVENTS_ON;\n  else\n  {\n    int type;\n    /*\n      type=   1   2      3   4      5\n           (OFF | ON) - (0 | 1) (DISABLE )\n    */\n    const static enum enum_opt_event_scheduler type2state[]=\n    { EVENTS_OFF, EVENTS_ON, EVENTS_OFF, EVENTS_ON, EVENTS_DISABLED };\n\n    type= find_type(argument, &opt_typelib, 1);\n\n    DBUG_ASSERT(type >= 0 && type <= 5); /* guaranteed by find_type */\n\n    if (type == 0)\n    {\n      fprintf(stderr, \"Unknown option to event-scheduler: %s\\n\", argument);\n      return TRUE;\n    }\n    opt_event_scheduler= type2state[type-1];\n  }\n  return FALSE;\n}\nconst char *\nEvents::get_opt_event_scheduler_str()\n{\n  const char *str;\n\n  pthread_mutex_lock(&LOCK_event_metadata);\n  str= opt_typelib.type_names[(int) opt_event_scheduler];\n  pthread_mutex_unlock(&LOCK_event_metadata);\n\n  return str;\n}\nbool Events::check_if_system_tables_error()\n{\n  DBUG_ENTER(\"Events::check_if_system_tables_error\");\n\n  if (check_system_tables_error)\n  {\n    my_error(ER_EVENTS_DB_ERROR, MYF(0));\n    DBUG_RETURN(TRUE);\n  }\n\n  DBUG_RETURN(FALSE);\n}\nint\nEvents::reconstruct_interval_expression(String *buf, interval_type interval,\n                                        longlong expression)\n{\n  ulonglong expr= expression;\n  char tmp_buff[128], *end;\n  bool close_quote= TRUE;\n  int multipl= 0;\n  char separator=':';\n\n  switch (interval) {\n  case INTERVAL_YEAR_MONTH:\n    multipl= 12;\n    separator= '-';\n    goto common_1_lev_code;\n  case INTERVAL_DAY_HOUR:\n    multipl= 24;\n    separator='';\n    goto common_1_lev_code;\n  case INTERVAL_HOUR_MINUTE:\n  case INTERVAL_MINUTE_SECOND:\n    multipl= 60;\ncommon_1_lev_code:\n    buf->append('\\'');\n    end= longlong10_to_str(expression/multipl, tmp_buff, 10);\n    buf->append(tmp_buff, (uint) (end- tmp_buff));\n    expr= expr - (expr/multipl)*multipl;\n    break;\n  case INTERVAL_DAY_MINUTE:\n  {\n    ulonglong tmp_expr= expr;\n\n    tmp_expr/=(24*60);\n    buf->append('\\'');\n    end= longlong10_to_str(tmp_expr, tmp_buff, 10);\n    buf->append(tmp_buff, (uint) (end- tmp_buff));// days\n    buf->append(' ');\n\n    tmp_expr= expr - tmp_expr*(24*60);//minutes left\n    end= longlong10_to_str(tmp_expr/60, tmp_buff, 10);\n    buf->append(tmp_buff, (uint) (end- tmp_buff));// hours\n\n    expr= tmp_expr - (tmp_expr/60)*60;\n}\n    break;\n  case INTERVAL_HOUR_SECOND:\n  {\n    ulonglong tmp_expr= expr;\n\n    buf->append('\\'');\n    end= longlong10_to_str(tmp_expr/3600, tmp_buff, 10);\n    buf->append(tmp_buff, (uint) (end- tmp_buff));// hours\n    buf->append(':');\n\n    tmp_expr= tmp_expr - (tmp_expr/3600)*3600;\n    end= longlong10_to_str(tmp_expr/60, tmp_buff, 10);\n    buf->append(tmp_buff, (uint) (end- tmp_buff));// minutes\n\n    expr= tmp_expr - (tmp_expr/60)*60;\n}\n    break;\n  case INTERVAL_DAY_SECOND:\n  {\n    ulonglong tmp_expr= expr;\n\n    tmp_expr/=(24*3600);\n    buf->append('\\'');\n    end= longlong10_to_str(tmp_expr, tmp_buff, 10);\n    buf->append(tmp_buff, (uint) (end- tmp_buff));// days\n    buf->append(' ');\n\n    end= longlong10_to_str(tmp_expr/3600, tmp_buff, 10);\n    buf->append(tmp_buff, (uint) (end- tmp_buff));// hours\n    buf->append(':');\n\n    tmp_expr= tmp_expr - (tmp_expr/3600)*3600;\n    end= longlong10_to_str(tmp_expr/60, tmp_buff, 10);\n    buf->append(tmp_buff, (uint) (end- tmp_buff));// minutes\n\n    expr= tmp_expr - (tmp_expr/60)*60;\n}\n    break;\n  case INTERVAL_DAY_MICROSECOND:\n  case INTERVAL_HOUR_MICROSECOND:\n  case INTERVAL_MINUTE_MICROSECOND:\n  case INTERVAL_SECOND_MICROSECOND:\n  case INTERVAL_MICROSECOND:\n    my_error(ER_NOT_SUPPORTED_YET, MYF(0), \"MICROSECOND\");\n    return 1;\n    break;\n  case INTERVAL_QUARTER:\n    expr/= 3;\n    close_quote= FALSE;\n    break;\n  case INTERVAL_WEEK:\n    expr/= 7;\n  default:\n    close_quote= FALSE;\n    break;\n  }\n  if (close_quote)\n    buf->append(separator);\n  end= longlong10_to_str(expr, tmp_buff, 10);\n  buf->append(tmp_buff, (uint) (end- tmp_buff));\n  if (close_quote)\n    buf->append('\\'');\n\n  return 0;\n}\nstatic int\ncreate_query_string(THD *thd, String *buf)\n{\nif (buf->append(STRING_WITH_LEN(\"CREATE \")))\n    return 1;\n  /* Append definer */\n  append_definer(thd, buf, &(thd->lex->definer->user), &(thd->lex->definer->host));\n  /* Append the left part of thd->query after \"DEFINER\" part */\n  if (buf->append(thd->lex->stmt_definition_begin,\n                  thd->lex->stmt_definition_end -\n                  thd->lex->stmt_definition_begin))\n    return 1;\n \n  return 0;\n}\nbool\nEvents::create_event(THD *thd, Event_parse_data *parse_data,\n                     bool if_not_exists)\n{\n  bool ret;\n  bool save_binlog_row_based, event_already_exists;\n  DBUG_ENTER(\"Events::create_event\");\nif (end_active_trans(thd))\n    DBUG_RETURN(TRUE);\n\n  if (check_if_system_tables_error())\n    DBUG_RETURN(TRUE);\nif (parse_data->check_parse_data(thd))\n    DBUG_RETURN(TRUE);\nDBUG_ASSERT(parse_data->expression || parse_data->execute_at);\n\n  if (check_access(thd, EVENT_ACL, parse_data->dbname.str, 0, 0, 0,\n                   is_schema_db(parse_data->dbname.str,\n                                parse_data->dbname.length)))\n    DBUG_RETURN(TRUE);\n\n  if (check_db_dir_existence(parse_data->dbname.str))\n  {\n    my_error(ER_BAD_DB_ERROR, MYF(0), parse_data->dbname.str);\n    DBUG_RETURN(TRUE);\n  }\n\n  if (parse_data->do_not_create)\n    DBUG_RETURN(FALSE);\nsave_binlog_row_based= thd->current_stmt_binlog_row_based;\n  thd->clear_current_stmt_binlog_row_based();\n\n  pthread_mutex_lock(&LOCK_event_metadata);\nif (!(ret= db_repository->create_event(thd, parse_data, if_not_exists,\n                                         &event_already_exists)))\n  {\n    Event_queue_element *new_element;\n    bool dropped= 0;\n\n    if (!event_already_exists)\n    {\n      if (!(new_element= new Event_queue_element()))\n        ret= TRUE;                                // OOM\n      else if ((ret= db_repository->load_named_event(thd, parse_data->dbname,\n                                                     parse_data->name,\n                                                     new_element)))\n      {\n        if (!db_repository->drop_event(thd, parse_data->dbname, parse_data->name,\n                                       TRUE))\n          dropped= 1;\n        delete new_element;\n      }\n      else\n      {\n        /* TODO: do not ignore the out parameter and a possible OOM error! */\n        bool created;\n        if (event_queue)\n          event_queue->create_event(thd, new_element, &created);\n      }\n    }\nif (!dropped)\n    {\nDBUG_ASSERT(thd->query() && thd->query_length());\n      String log_query;\n      if (create_query_string(thd, &log_query))\n      {\n        sql_print_error(\"Event Error: An error occurred while creating query string, \"\n                        \"before writing it into binary log.\");\n        ret= true;\n      }\n      else\nret= write_bin_log(thd, TRUE, log_query.c_ptr(), log_query.length());\n    }\n  }\n  pthread_mutex_unlock(&LOCK_event_metadata);\n  /* Restore the state of binlog format */\n  thd->current_stmt_binlog_row_based= save_binlog_row_based;\n\n  DBUG_RETURN(ret);\n}\nbool\nEvents::update_event(THD *thd, Event_parse_data *parse_data,\n                     LEX_STRING *new_dbname, LEX_STRING *new_name)\n{\n  int ret;\n  bool save_binlog_row_based;\n  Event_queue_element *new_element;\n\n  DBUG_ENTER(\"Events::update_event\");\nif (end_active_trans(thd))\n    DBUG_RETURN(TRUE);\n\n  if (check_if_system_tables_error())\n    DBUG_RETURN(TRUE);\n\n  if (parse_data->check_parse_data(thd) || parse_data->do_not_create)\n    DBUG_RETURN(TRUE);\n\n  if (check_access(thd, EVENT_ACL, parse_data->dbname.str, 0, 0, 0,\n                   is_schema_db(parse_data->dbname.str,\n                                parse_data->dbname.length)))\n    DBUG_RETURN(TRUE);\n\n  if (new_dbname)                               /* It's a rename */\n  {\nif (!sortcmp_lex_string(parse_data->dbname, *new_dbname,\n                             system_charset_info) &&\n       !sortcmp_lex_string(parse_data->name, *new_name,\n                             system_charset_info))\n    {\n      my_error(ER_EVENT_SAME_NAME, MYF(0));\n      DBUG_RETURN(TRUE);\n    }\nif (check_access(thd, EVENT_ACL, new_dbname->str, 0, 0, 0,\n                     is_schema_db(new_dbname->str, new_dbname->length)))\n      DBUG_RETURN(TRUE);\nif (check_db_dir_existence(new_dbname->str))\n    {\n      my_error(ER_BAD_DB_ERROR, MYF(0), new_dbname->str);\n      DBUG_RETURN(TRUE);\n    }\n  }\nsave_binlog_row_based= thd->current_stmt_binlog_row_based;\n  thd->clear_current_stmt_binlog_row_based();\n\n  pthread_mutex_lock(&LOCK_event_metadata);\nif (!(ret= db_repository->update_event(thd, parse_data,\n                                         new_dbname, new_name)))\n  {\n    LEX_STRING dbname= new_dbname? *new_dbname : parse_data->dbname;\n    LEX_STRING name= new_name? *new_name : parse_data->name;\n\n    if (!(new_element= new Event_queue_element()))\n      ret= TRUE;                                // OOM\n    else if ((ret= db_repository->load_named_event(thd, dbname, name,\n                                                   new_element)))\n    {\n      DBUG_ASSERT(ret == OP_LOAD_ERROR);\n      delete new_element;\n    }\n    else\n    {\nif (event_queue)\n        event_queue->update_event(thd, parse_data->dbname, parse_data->name,\n                                  new_element);\n      /* Binlog the alter event. */\n      DBUG_ASSERT(thd->query() && thd->query_length());\n      ret= write_bin_log(thd, TRUE, thd->query(), thd->query_length());\n    }\n  }\n  pthread_mutex_unlock(&LOCK_event_metadata);\n  /* Restore the state of binlog format */\n  thd->current_stmt_binlog_row_based= save_binlog_row_based;\n\n  DBUG_RETURN(ret);\n}\nbool\nEvents::drop_event(THD *thd, LEX_STRING dbname, LEX_STRING name, bool if_exists)\n{\n  int ret;\n  bool save_binlog_row_based;\n  DBUG_ENTER(\"Events::drop_event\");\nif (end_active_trans(thd))\n    DBUG_RETURN(TRUE);\n\n  if (check_if_system_tables_error())\n    DBUG_RETURN(TRUE);\n\n  if (check_access(thd, EVENT_ACL, dbname.str, 0, 0, 0,\n                   is_schema_db(dbname.str, dbname.length)))\n    DBUG_RETURN(TRUE);\nsave_binlog_row_based= thd->current_stmt_binlog_row_based;\n  thd->clear_current_stmt_binlog_row_based();\n\n  pthread_mutex_lock(&LOCK_event_metadata);\nif (!(ret= db_repository->drop_event(thd, dbname, name, if_exists)))\n  {\n    if (event_queue)\n      event_queue->drop_event(thd, dbname, name);\n    /* Binlog the drop event. */\n    DBUG_ASSERT(thd->query() && thd->query_length());\n    ret= write_bin_log(thd, TRUE, thd->query(), thd->query_length());\n  }\n  pthread_mutex_unlock(&LOCK_event_metadata);\n  /* Restore the state of binlog format */\n  thd->current_stmt_binlog_row_based= save_binlog_row_based;\n  DBUG_RETURN(ret);\n}\nvoid\nEvents::drop_schema_events(THD *thd, char *db)\n{\n  LEX_STRING const db_lex= { db, strlen(db) };\n\n  DBUG_ENTER(\"Events::drop_schema_events\");\n  DBUG_PRINT(\"enter\", (\"dropping events from %s\", db));\npthread_mutex_lock(&LOCK_event_metadata);\n  if (event_queue)\n    event_queue->drop_schema_events(thd, db_lex);\n  db_repository->drop_schema_events(thd, db_lex);\n  pthread_mutex_unlock(&LOCK_event_metadata);\n\n  DBUG_VOID_RETURN;\n}\nstatic bool\nsend_show_create_event(THD *thd, Event_timed *et, Protocol *protocol)\n{\n  char show_str_buf[10 * STRING_BUFFER_USUAL_SIZE];\n  String show_str(show_str_buf, sizeof(show_str_buf), system_charset_info);\n  List<Item> field_list;\n  LEX_STRING sql_mode;\n  const String *tz_name;\n\n  DBUG_ENTER(\"send_show_create_event\");\n\n  show_str.length(0);\n  if (et->get_create_event(thd, &show_str))\n    DBUG_RETURN(TRUE);\n\n  field_list.push_back(new Item_empty_string(\"Event\", NAME_CHAR_LEN));\n\n  if (sys_var_thd_sql_mode::symbolic_mode_representation(thd, et->sql_mode,\n                                                         &sql_mode))\n    DBUG_RETURN(TRUE);\n\n  field_list.push_back(new Item_empty_string(\"sql_mode\", (uint) sql_mode.length));\n\n  tz_name= et->time_zone->get_name();\n\n  field_list.push_back(new Item_empty_string(\"time_zone\",\n                                             tz_name->length()));\n\n  field_list.push_back(new Item_empty_string(\"Create Event\",\n                                             show_str.length()));\n\n  field_list.push_back(\n    new Item_empty_string(\"character_set_client\", MY_CS_NAME_SIZE));\n\n  field_list.push_back(\n    new Item_empty_string(\"collation_connection\", MY_CS_NAME_SIZE));\n\n  field_list.push_back(\n    new Item_empty_string(\"Database Collation\", MY_CS_NAME_SIZE));\n\n  if (protocol->send_fields(&field_list,\n                            Protocol::SEND_NUM_ROWS | Protocol::SEND_EOF))\n    DBUG_RETURN(TRUE);\n\n  protocol->prepare_for_resend();\n\n  protocol->store(et->name.str, et->name.length, system_charset_info);\n  protocol->store(sql_mode.str, sql_mode.length, system_charset_info);\n  protocol->store(tz_name->ptr(), tz_name->length(), system_charset_info);\n  protocol->store(show_str.c_ptr(), show_str.length(),\n                  et->creation_ctx->get_client_cs());\n  protocol->store(et->creation_ctx->get_client_cs()->csname,\n                  strlen(et->creation_ctx->get_client_cs()->csname),\n                  system_charset_info);\n  protocol->store(et->creation_ctx->get_connection_cl()->name,\n                  strlen(et->creation_ctx->get_connection_cl()->name),\n                  system_charset_info);\n  protocol->store(et->creation_ctx->get_db_cl()->name,\n                  strlen(et->creation_ctx->get_db_cl()->name),\n                  system_charset_info);\n\n  if (protocol->write())\n    DBUG_RETURN(TRUE);\n\n  my_eof(thd);\n\n  DBUG_RETURN(FALSE);\n}\nbool\nEvents::show_create_event(THD *thd, LEX_STRING dbname, LEX_STRING name)\n{\n  Open_tables_state open_tables_backup;\n  Event_timed et;\n  bool ret;\n\n  DBUG_ENTER(\"Events::show_create_event\");\n  DBUG_PRINT(\"enter\", (\"name: %s@%s\", dbname.str, name.str));\n\n  if (check_if_system_tables_error())\n    DBUG_RETURN(TRUE);\n\n  if (check_access(thd, EVENT_ACL, dbname.str, 0, 0, 0,\n                   is_schema_db(dbname.str, dbname.length)))\n    DBUG_RETURN(TRUE);\nthd->reset_n_backup_open_tables_state(&open_tables_backup);\n  ret= db_repository->load_named_event(thd, dbname, name, &et);\n  thd->restore_backup_open_tables_state(&open_tables_backup);\n\n  if (!ret)\n    ret= send_show_create_event(thd, &et, thd->protocol);\n\n  DBUG_RETURN(ret);\n}\nint\nEvents::fill_schema_events(THD *thd, TABLE_LIST *tables, COND *\n)\n{\n  char *db= NULL;\n  int ret;\n  Open_tables_state open_tables_backup;\n  DBUG_ENTER(\"Events::fill_schema_events\");\n\n  if (check_if_system_tables_error())\n    DBUG_RETURN(1);\nif (thd->lex->sql_command == SQLCOM_SHOW_EVENTS)\n  {\n    DBUG_ASSERT(thd->lex->select_lex.db);\n        check_access(thd, EVENT_ACL, thd->lex->select_lex.db, 0, 0, 0, 0))\n      DBUG_RETURN(1);\n    db= thd->lex->select_lex.db;\n  }\nthd->reset_n_backup_open_tables_state(&open_tables_backup);\n  ret= db_repository->fill_schema_events(thd, tables, db);\n  thd->restore_backup_open_tables_state(&open_tables_backup);\n\n  DBUG_RETURN(ret);\n}\nbool\nEvents::init(my_bool opt_noacl_or_bootstrap)\n{\n\n  THD *thd;\n  bool res= FALSE;\n\n  DBUG_ENTER(\"Events::init\");\n\n  /* We need a temporary THD during boot */\n  if (!(thd= new THD()))\n  {\n    res= TRUE;\n    goto end;\n  }\nthd->thread_stack= (char*) &thd;\n  thd->store_globals();\n  lex_start(thd);\nif (!(db_repository= new Event_db_repository))\n  {\n    res= TRUE; /* fatal error: request unireg_abort */\n    goto end;\n  }\nif (opt_noacl_or_bootstrap || Event_db_repository::check_system_tables(thd))\n  {\n    if (! opt_noacl_or_bootstrap)\n    {\n      sql_print_error(\"Event Scheduler: An error occurred when initializing \"\n                      \"system tables. Disabling the Event Scheduler.\");\n      check_system_tables_error= TRUE;\n    }\nopt_event_scheduler= EVENTS_DISABLED;\n    goto end;\n  }\nif (opt_event_scheduler == Events::EVENTS_DISABLED)\n    goto end;\n\n\n  DBUG_ASSERT(opt_event_scheduler == Events::EVENTS_ON ||\n              opt_event_scheduler == Events::EVENTS_OFF);\n\n  if (!(event_queue= new Event_queue) ||\n    !(scheduler= new Event_scheduler(event_queue)))\n  {\n    res= TRUE; /* fatal error: request unireg_abort */\n    goto end;\n  }\n\n  if (event_queue->init_queue(thd) || load_events_from_db(thd) ||\n      (opt_event_scheduler == EVENTS_ON && scheduler->start()))\n  {\n    sql_print_error(\"Event Scheduler: Error while loading from disk.\");\n    res= TRUE; /* fatal error: request unireg_abort */\n    goto end;\n  }\n  Event_worker_thread::init(db_repository);\n\nend:\n  if (res)\n  {\n    delete db_repository;\n    delete event_queue;\n    delete scheduler;\n  }\n  delete thd;\n  /* Remember that we don't have a THD */\n  my_pthread_setspecific_ptr(THR_THD,  NULL);\n\n  DBUG_RETURN(res);\n}\nvoid\nEvents::deinit()\n{\n  DBUG_ENTER(\"Events::deinit\");\n\n  if (opt_event_scheduler!= EVENTS_DISABLED)\n  {\n    delete scheduler;\n    scheduler= NULL;                            /* safety */\n    delete event_queue;\n    event_queue= NULL;                          /* safety */\n  }\n\n  delete db_repository;\n  db_repository= NULL;                          /* safety */\n\n  DBUG_VOID_RETURN;\n}\n\n\n/**\n  Inits Events mutexes\n\n  SYNOPSIS\n    Events::init_mutexes()\n      thd  Thread\n*/\n\nvoid\nEvents::init_mutexes()\n{\n  pthread_mutex_init(&LOCK_event_metadata, MY_MUTEX_INIT_FAST);\n}\n\n\n/*\n  Destroys Events mutexes\n\n  SYNOPSIS\n    Events::destroy_mutexes()\n*/\n\nvoid\nEvents::destroy_mutexes()\n{\n  pthread_mutex_destroy(&LOCK_event_metadata);\n}\nvoid\nEvents::dump_internal_status()\n{\n  DBUG_ENTER(\"Events::dump_internal_status\");\n  puts(\"\\n\\n\\nEvents status:\");\n  puts(\"LLA = Last Locked At  LUA = Last Unlocked At\");\n  puts(\"WOC = Waiting On Condition  DL = Data Locked\");\n\n  pthread_mutex_lock(&LOCK_event_metadata);\n  if (opt_event_scheduler == EVENTS_DISABLED)\n    puts(\"The Event Scheduler is disabled\");\n  else\n  {\n    scheduler->dump_internal_status();\n    event_queue->dump_internal_status();\n  }\n\n  pthread_mutex_unlock(&LOCK_event_metadata);\n  DBUG_VOID_RETURN;\n}\nbool\nEvents::switch_event_scheduler_state(enum_opt_event_scheduler new_state)\n{\n  bool ret= FALSE;\n\n  DBUG_ENTER(\"Events::switch_event_scheduler_state\");\n\n  DBUG_ASSERT(new_state == Events::EVENTS_ON ||\n              new_state == Events::EVENTS_OFF);\nif (check_if_system_tables_error())\n    DBUG_RETURN(TRUE);\n\n  pthread_mutex_lock(&LOCK_event_metadata);\n\n  if (opt_event_scheduler == EVENTS_DISABLED)\n  {\n    my_error(ER_OPTION_PREVENTS_STATEMENT,\n             MYF(0), \"--event-scheduler=DISABLED or --skip-grant-tables\");\n    ret= TRUE;\n    goto end;\n  }\n\n  if (new_state == EVENTS_ON)\n    ret= scheduler->start();\n  else\n    ret= scheduler->stop();\n\n  if (ret)\n  {\n    my_error(ER_EVENT_SET_VAR_ERROR, MYF(0), 0);\n    goto end;\n  }\n\n  opt_event_scheduler= new_state;\n\nend:\n  pthread_mutex_unlock(&LOCK_event_metadata);\n  DBUG_RETURN(ret);\n}\nbool\nEvents::load_events_from_db(THD *thd)\n{\n  TABLE *table;\n  READ_RECORD read_record_info;\n  bool ret= TRUE;\n  uint count= 0;\n  ulong saved_master_access;\n\n  DBUG_ENTER(\"Events::load_events_from_db\");\n  DBUG_PRINT(\"enter\", (\"thd: 0x%lx\", (long) thd));\nsaved_master_access= thd->security_ctx->master_access;\n  thd->security_ctx->master_access |= SUPER_ACL;\n\n  ret= db_repository->open_event_table(thd, TL_WRITE, &table);\n\n  thd->security_ctx->master_access= saved_master_access;\n\n  if (ret)\n  {\n    sql_print_error(\"Event Scheduler: Failed to open table mysql.event\");\n    DBUG_RETURN(TRUE);\n  }\n\n  init_read_record(&read_record_info, thd, table, NULL, 0, 1, FALSE);\n  while (!(read_record_info.read_record(&read_record_info)))\n  {\n    Event_queue_element *et;\n    bool created;\n    bool drop_on_completion;\n\n    if (!(et= new Event_queue_element))\n      goto end;\n\n    DBUG_PRINT(\"info\", (\"Loading event from row.\"));\n\n    if (et->load_from_row(thd, table))\n    {\n      sql_print_error(\"Event Scheduler: \"\n                      \"Error while loading events from mysql.event. \"\n                      \"The table probably contains bad data or is corrupted\");\n      delete et;\n      goto end;\n    }\n    drop_on_completion= (et->on_completion ==\n                         Event_parse_data::ON_COMPLETION_DROP);\n\n\n    if (event_queue->create_event(thd, et, &created))\n    {\n      /* Out of memory */\n      delete et;\n      goto end;\n    }\n    if (created)\n      count++;\n    else if (drop_on_completion)\n    {\nint rc= table->file->ha_delete_row(table->record[0]);\n      if (rc)\n      {\n        table->file->print_error(rc, MYF(0));\n        goto end;\n      }\n    }\n  }\n  sql_print_information(\"Event Scheduler: Loaded %d event%s\",\n                        count, (count == 1)? \"\" : \"s\");\n  ret= FALSE;\n\nend:\n  end_read_record(&read_record_info);\n\n  close_thread_tables(thd);\n\n  DBUG_RETURN(ret);\n}"}
{"id": 11, "generator": "claude-3-sonnet-20240229", "position": "Level 0 Node 0", "flag": "askWithSourceText", "question": {"question": "Based on the given excerpt, summarize the key steps involved in creating an event and integrating it with the event queue and scheduler in MySQL.", "questionCategory": "summary", "comprehension": "semantic"}, "answer": "Based on the provided code excerpt, the key steps involved in creating an event and integrating it with the event queue and scheduler in MySQL can be summarized as follows:1. Check if the event scheduler is enabled by verifying the value of the `opt_event_scheduler` variable. If it is disabled, an error is raised.2. Open the `mysql.event` table in write mode for storing the event details.3. For each event row in the `mysql.event` table:   a. Create a new `Event_queue_element` object to hold the event data.   b. Load the event data from the row into the `Event_queue_element` object using the `load_from_row` method.   c. Check if the event is set to be dropped on completion based on the `on_completion` flag.   d. Create the event in the event queue by calling `event_queue->create_event`.   e. If the event was successfully created, increment the event count.   f. If the event is set to be dropped on completion, delete the corresponding row from the `mysql.event` table.4. Print a summary message indicating the number of events loaded.5. Close the `mysql.event` table and release any resources used during the loading process.The code excerpt does not provide details on creating a new event or integrating it with the event queue and scheduler. It focuses on loading existing events from the `mysql.event` table into the event queue. However, it can be inferred that creating a new event would involve inserting a new row into the `mysql.event` table, and the event scheduler would automatically pick up the new event during the next load cycle.", "length": 7368, "text": "// language: C++\n#include \"mysql_priv.h\"\n#include \"events.h\"\n#include \"event_data_objects.h\"\n#include \"event_db_repository.h\"\n#include \"event_queue.h\"\n#include \"event_scheduler.h\"\nstatic const char *opt_event_scheduler_state_names[]=\n    { \"OFF\", \"ON\", \"0\", \"1\", \"DISABLED\", NullS };\n\nconst TYPELIB Events::opt_typelib=\n{\n  array_elements(opt_event_scheduler_state_names)-1,\n  \"\",\n  opt_event_scheduler_state_names,\n  NULL\n};\nstatic const char *var_event_scheduler_state_names[]= { \"OFF\", \"ON\", NullS };\n\nconst TYPELIB Events::var_typelib=\n{\n  array_elements(var_event_scheduler_state_names)-1,\n  \"\",\n  var_event_scheduler_state_names,\n  NULL\n};\n\nEvent_queue *Events::event_queue;\nEvent_scheduler *Events::scheduler;\nEvent_db_repository *Events::db_repository;\nenum Events::enum_opt_event_scheduler\nEvents::opt_event_scheduler= Events::EVENTS_OFF;\npthread_mutex_t Events::LOCK_event_metadata;\nbool Events::check_system_tables_error= FALSE;\nint sortcmp_lex_string(LEX_STRING s, LEX_STRING t, CHARSET_INFO *cs)\n{\n return cs->coll->strnncollsp(cs, (uchar *) s.str,s.length,\n                                  (uchar *) t.str,t.length, 0);\n}\nbool\nEvents::set_opt_event_scheduler(char *argument)\n{\n  if (argument == NULL)\n    opt_event_scheduler= Events::EVENTS_ON;\n  else\n  {\n    int type;\n    /*\n      type=   1   2      3   4      5\n           (OFF | ON) - (0 | 1) (DISABLE )\n    */\n    const static enum enum_opt_event_scheduler type2state[]=\n    { EVENTS_OFF, EVENTS_ON, EVENTS_OFF, EVENTS_ON, EVENTS_DISABLED };\n\n    type= find_type(argument, &opt_typelib, 1);\n\n    DBUG_ASSERT(type >= 0 && type <= 5); /* guaranteed by find_type */\n\n    if (type == 0)\n    {\n      fprintf(stderr, \"Unknown option to event-scheduler: %s\\n\", argument);\n      return TRUE;\n    }\n    opt_event_scheduler= type2state[type-1];\n  }\n  return FALSE;\n}\nconst char *\nEvents::get_opt_event_scheduler_str()\n{\n  const char *str;\n\n  pthread_mutex_lock(&LOCK_event_metadata);\n  str= opt_typelib.type_names[(int) opt_event_scheduler];\n  pthread_mutex_unlock(&LOCK_event_metadata);\n\n  return str;\n}\nbool Events::check_if_system_tables_error()\n{\n  DBUG_ENTER(\"Events::check_if_system_tables_error\");\n\n  if (check_system_tables_error)\n  {\n    my_error(ER_EVENTS_DB_ERROR, MYF(0));\n    DBUG_RETURN(TRUE);\n  }\n\n  DBUG_RETURN(FALSE);\n}\nint\nEvents::reconstruct_interval_expression(String *buf, interval_type interval,\n                                        longlong expression)\n{\n  ulonglong expr= expression;\n  char tmp_buff[128], *end;\n  bool close_quote= TRUE;\n  int multipl= 0;\n  char separator=':';\n\n  switch (interval) {\n  case INTERVAL_YEAR_MONTH:\n    multipl= 12;\n    separator= '-';\n    goto common_1_lev_code;\n  case INTERVAL_DAY_HOUR:\n    multipl= 24;\n    separator='';\n    goto common_1_lev_code;\n  case INTERVAL_HOUR_MINUTE:\n  case INTERVAL_MINUTE_SECOND:\n    multipl= 60;\ncommon_1_lev_code:\n    buf->append('\\'');\n    end= longlong10_to_str(expression/multipl, tmp_buff, 10);\n    buf->append(tmp_buff, (uint) (end- tmp_buff));\n    expr= expr - (expr/multipl)*multipl;\n    break;\n  case INTERVAL_DAY_MINUTE:\n  {\n    ulonglong tmp_expr= expr;\n\n    tmp_expr/=(24*60);\n    buf->append('\\'');\n    end= longlong10_to_str(tmp_expr, tmp_buff, 10);\n    buf->append(tmp_buff, (uint) (end- tmp_buff));// days\n    buf->append(' ');\n\n    tmp_expr= expr - tmp_expr*(24*60);//minutes left\n    end= longlong10_to_str(tmp_expr/60, tmp_buff, 10);\n    buf->append(tmp_buff, (uint) (end- tmp_buff));// hours\n\n    expr= tmp_expr - (tmp_expr/60)*60;\n}\n    break;\n  case INTERVAL_HOUR_SECOND:\n  {\n    ulonglong tmp_expr= expr;\n\n    buf->append('\\'');\n    end= longlong10_to_str(tmp_expr/3600, tmp_buff, 10);\n    buf->append(tmp_buff, (uint) (end- tmp_buff));// hours\n    buf->append(':');\n\n    tmp_expr= tmp_expr - (tmp_expr/3600)*3600;\n    end= longlong10_to_str(tmp_expr/60, tmp_buff, 10);\n    buf->append(tmp_buff, (uint) (end- tmp_buff));// minutes\n\n    expr= tmp_expr - (tmp_expr/60)*60;\n}\n    break;\n  case INTERVAL_DAY_SECOND:\n  {\n    ulonglong tmp_expr= expr;\n\n    tmp_expr/=(24*3600);\n    buf->append('\\'');\n    end= longlong10_to_str(tmp_expr, tmp_buff, 10);\n    buf->append(tmp_buff, (uint) (end- tmp_buff));// days\n    buf->append(' ');\n\n    end= longlong10_to_str(tmp_expr/3600, tmp_buff, 10);\n    buf->append(tmp_buff, (uint) (end- tmp_buff));// hours\n    buf->append(':');\n\n    tmp_expr= tmp_expr - (tmp_expr/3600)*3600;\n    end= longlong10_to_str(tmp_expr/60, tmp_buff, 10);\n    buf->append(tmp_buff, (uint) (end- tmp_buff));// minutes\n\n    expr= tmp_expr - (tmp_expr/60)*60;\n}\n    break;\n  case INTERVAL_DAY_MICROSECOND:\n  case INTERVAL_HOUR_MICROSECOND:\n  case INTERVAL_MINUTE_MICROSECOND:\n  case INTERVAL_SECOND_MICROSECOND:\n  case INTERVAL_MICROSECOND:\n    my_error(ER_NOT_SUPPORTED_YET, MYF(0), \"MICROSECOND\");\n    return 1;\n    break;\n  case INTERVAL_QUARTER:\n    expr/= 3;\n    close_quote= FALSE;\n    break;\n  case INTERVAL_WEEK:\n    expr/= 7;\n  default:\n    close_quote= FALSE;\n    break;\n  }\n  if (close_quote)\n    buf->append(separator);\n  end= longlong10_to_str(expr, tmp_buff, 10);\n  buf->append(tmp_buff, (uint) (end- tmp_buff));\n  if (close_quote)\n    buf->append('\\'');\n\n  return 0;\n}\nstatic int\ncreate_query_string(THD *thd, String *buf)\n{\nif (buf->append(STRING_WITH_LEN(\"CREATE \")))\n    return 1;\n  /* Append definer */\n  append_definer(thd, buf, &(thd->lex->definer->user), &(thd->lex->definer->host));\n  /* Append the left part of thd->query after \"DEFINER\" part */\n  if (buf->append(thd->lex->stmt_definition_begin,\n                  thd->lex->stmt_definition_end -\n                  thd->lex->stmt_definition_begin))\n    return 1;\n \n  return 0;\n}\nbool\nEvents::create_event(THD *thd, Event_parse_data *parse_data,\n                     bool if_not_exists)\n{\n  bool ret;\n  bool save_binlog_row_based, event_already_exists;\n  DBUG_ENTER(\"Events::create_event\");\nif (end_active_trans(thd))\n    DBUG_RETURN(TRUE);\n\n  if (check_if_system_tables_error())\n    DBUG_RETURN(TRUE);\nif (parse_data->check_parse_data(thd))\n    DBUG_RETURN(TRUE);\nDBUG_ASSERT(parse_data->expression || parse_data->execute_at);\n\n  if (check_access(thd, EVENT_ACL, parse_data->dbname.str, 0, 0, 0,\n                   is_schema_db(parse_data->dbname.str,\n                                parse_data->dbname.length)))\n    DBUG_RETURN(TRUE);\n\n  if (check_db_dir_existence(parse_data->dbname.str))\n  {\n    my_error(ER_BAD_DB_ERROR, MYF(0), parse_data->dbname.str);\n    DBUG_RETURN(TRUE);\n  }\n\n  if (parse_data->do_not_create)\n    DBUG_RETURN(FALSE);\nsave_binlog_row_based= thd->current_stmt_binlog_row_based;\n  thd->clear_current_stmt_binlog_row_based();\n\n  pthread_mutex_lock(&LOCK_event_metadata);\nif (!(ret= db_repository->create_event(thd, parse_data, if_not_exists,\n                                         &event_already_exists)))\n  {\n    Event_queue_element *new_element;\n    bool dropped= 0;\n\n    if (!event_already_exists)\n    {\n      if (!(new_element= new Event_queue_element()))\n        ret= TRUE;                                // OOM\n      else if ((ret= db_repository->load_named_event(thd, parse_data->dbname,\n                                                     parse_data->name,\n                                                     new_element)))\n      {\n        if (!db_repository->drop_event(thd, parse_data->dbname, parse_data->name,\n                                       TRUE))\n          dropped= 1;\n        delete new_element;\n      }\n      else\n      {\n        /* TODO: do not ignore the out parameter and a possible OOM error! */\n        bool created;\n        if (event_queue)\n          event_queue->create_event(thd, new_element, &created);\n      }\n    }\nif (!dropped)\n    {\nDBUG_ASSERT(thd->query() && thd->query_length());\n      String log_query;\n      if (create_query_string(thd, &log_query))\n      {\n        sql_print_error(\"Event Error: An error occurred while creating query string, \"\n                        \"before writing it into binary log.\");\n        ret= true;\n      }\n      else\nret= write_bin_log(thd, TRUE, log_query.c_ptr(), log_query.length());\n    }\n  }\n  pthread_mutex_unlock(&LOCK_event_metadata);\n  /* Restore the state of binlog format */\n  thd->current_stmt_binlog_row_based= save_binlog_row_based;\n\n  DBUG_RETURN(ret);\n}\nbool\nEvents::update_event(THD *thd, Event_parse_data *parse_data,\n                     LEX_STRING *new_dbname, LEX_STRING *new_name)\n{\n  int ret;\n  bool save_binlog_row_based;\n  Event_queue_element *new_element;\n\n  DBUG_ENTER(\"Events::update_event\");\nif (end_active_trans(thd))\n    DBUG_RETURN(TRUE);\n\n  if (check_if_system_tables_error())\n    DBUG_RETURN(TRUE);\n\n  if (parse_data->check_parse_data(thd) || parse_data->do_not_create)\n    DBUG_RETURN(TRUE);\n\n  if (check_access(thd, EVENT_ACL, parse_data->dbname.str, 0, 0, 0,\n                   is_schema_db(parse_data->dbname.str,\n                                parse_data->dbname.length)))\n    DBUG_RETURN(TRUE);\n\n  if (new_dbname)                               /* It's a rename */\n  {\nif (!sortcmp_lex_string(parse_data->dbname, *new_dbname,\n                             system_charset_info) &&\n       !sortcmp_lex_string(parse_data->name, *new_name,\n                             system_charset_info))\n    {\n      my_error(ER_EVENT_SAME_NAME, MYF(0));\n      DBUG_RETURN(TRUE);\n    }\nif (check_access(thd, EVENT_ACL, new_dbname->str, 0, 0, 0,\n                     is_schema_db(new_dbname->str, new_dbname->length)))\n      DBUG_RETURN(TRUE);\nif (check_db_dir_existence(new_dbname->str))\n    {\n      my_error(ER_BAD_DB_ERROR, MYF(0), new_dbname->str);\n      DBUG_RETURN(TRUE);\n    }\n  }\nsave_binlog_row_based= thd->current_stmt_binlog_row_based;\n  thd->clear_current_stmt_binlog_row_based();\n\n  pthread_mutex_lock(&LOCK_event_metadata);\nif (!(ret= db_repository->update_event(thd, parse_data,\n                                         new_dbname, new_name)))\n  {\n    LEX_STRING dbname= new_dbname? *new_dbname : parse_data->dbname;\n    LEX_STRING name= new_name? *new_name : parse_data->name;\n\n    if (!(new_element= new Event_queue_element()))\n      ret= TRUE;                                // OOM\n    else if ((ret= db_repository->load_named_event(thd, dbname, name,\n                                                   new_element)))\n    {\n      DBUG_ASSERT(ret == OP_LOAD_ERROR);\n      delete new_element;\n    }\n    else\n    {\nif (event_queue)\n        event_queue->update_event(thd, parse_data->dbname, parse_data->name,\n                                  new_element);\n      /* Binlog the alter event. */\n      DBUG_ASSERT(thd->query() && thd->query_length());\n      ret= write_bin_log(thd, TRUE, thd->query(), thd->query_length());\n    }\n  }\n  pthread_mutex_unlock(&LOCK_event_metadata);\n  /* Restore the state of binlog format */\n  thd->current_stmt_binlog_row_based= save_binlog_row_based;\n\n  DBUG_RETURN(ret);\n}\nbool\nEvents::drop_event(THD *thd, LEX_STRING dbname, LEX_STRING name, bool if_exists)\n{\n  int ret;\n  bool save_binlog_row_based;\n  DBUG_ENTER(\"Events::drop_event\");\nif (end_active_trans(thd))\n    DBUG_RETURN(TRUE);\n\n  if (check_if_system_tables_error())\n    DBUG_RETURN(TRUE);\n\n  if (check_access(thd, EVENT_ACL, dbname.str, 0, 0, 0,\n                   is_schema_db(dbname.str, dbname.length)))\n    DBUG_RETURN(TRUE);\nsave_binlog_row_based= thd->current_stmt_binlog_row_based;\n  thd->clear_current_stmt_binlog_row_based();\n\n  pthread_mutex_lock(&LOCK_event_metadata);\nif (!(ret= db_repository->drop_event(thd, dbname, name, if_exists)))\n  {\n    if (event_queue)\n      event_queue->drop_event(thd, dbname, name);\n    /* Binlog the drop event. */\n    DBUG_ASSERT(thd->query() && thd->query_length());\n    ret= write_bin_log(thd, TRUE, thd->query(), thd->query_length());\n  }\n  pthread_mutex_unlock(&LOCK_event_metadata);\n  /* Restore the state of binlog format */\n  thd->current_stmt_binlog_row_based= save_binlog_row_based;\n  DBUG_RETURN(ret);\n}\nvoid\nEvents::drop_schema_events(THD *thd, char *db)\n{\n  LEX_STRING const db_lex= { db, strlen(db) };\n\n  DBUG_ENTER(\"Events::drop_schema_events\");\n  DBUG_PRINT(\"enter\", (\"dropping events from %s\", db));\npthread_mutex_lock(&LOCK_event_metadata);\n  if (event_queue)\n    event_queue->drop_schema_events(thd, db_lex);\n  db_repository->drop_schema_events(thd, db_lex);\n  pthread_mutex_unlock(&LOCK_event_metadata);\n\n  DBUG_VOID_RETURN;\n}\nstatic bool\nsend_show_create_event(THD *thd, Event_timed *et, Protocol *protocol)\n{\n  char show_str_buf[10 * STRING_BUFFER_USUAL_SIZE];\n  String show_str(show_str_buf, sizeof(show_str_buf), system_charset_info);\n  List<Item> field_list;\n  LEX_STRING sql_mode;\n  const String *tz_name;\n\n  DBUG_ENTER(\"send_show_create_event\");\n\n  show_str.length(0);\n  if (et->get_create_event(thd, &show_str))\n    DBUG_RETURN(TRUE);\n\n  field_list.push_back(new Item_empty_string(\"Event\", NAME_CHAR_LEN));\n\n  if (sys_var_thd_sql_mode::symbolic_mode_representation(thd, et->sql_mode,\n                                                         &sql_mode))\n    DBUG_RETURN(TRUE);\n\n  field_list.push_back(new Item_empty_string(\"sql_mode\", (uint) sql_mode.length));\n\n  tz_name= et->time_zone->get_name();\n\n  field_list.push_back(new Item_empty_string(\"time_zone\",\n                                             tz_name->length()));\n\n  field_list.push_back(new Item_empty_string(\"Create Event\",\n                                             show_str.length()));\n\n  field_list.push_back(\n    new Item_empty_string(\"character_set_client\", MY_CS_NAME_SIZE));\n\n  field_list.push_back(\n    new Item_empty_string(\"collation_connection\", MY_CS_NAME_SIZE));\n\n  field_list.push_back(\n    new Item_empty_string(\"Database Collation\", MY_CS_NAME_SIZE));\n\n  if (protocol->send_fields(&field_list,\n                            Protocol::SEND_NUM_ROWS | Protocol::SEND_EOF))\n    DBUG_RETURN(TRUE);\n\n  protocol->prepare_for_resend();\n\n  protocol->store(et->name.str, et->name.length, system_charset_info);\n  protocol->store(sql_mode.str, sql_mode.length, system_charset_info);\n  protocol->store(tz_name->ptr(), tz_name->length(), system_charset_info);\n  protocol->store(show_str.c_ptr(), show_str.length(),\n                  et->creation_ctx->get_client_cs());\n  protocol->store(et->creation_ctx->get_client_cs()->csname,\n                  strlen(et->creation_ctx->get_client_cs()->csname),\n                  system_charset_info);\n  protocol->store(et->creation_ctx->get_connection_cl()->name,\n                  strlen(et->creation_ctx->get_connection_cl()->name),\n                  system_charset_info);\n  protocol->store(et->creation_ctx->get_db_cl()->name,\n                  strlen(et->creation_ctx->get_db_cl()->name),\n                  system_charset_info);\n\n  if (protocol->write())\n    DBUG_RETURN(TRUE);\n\n  my_eof(thd);\n\n  DBUG_RETURN(FALSE);\n}\nbool\nEvents::show_create_event(THD *thd, LEX_STRING dbname, LEX_STRING name)\n{\n  Open_tables_state open_tables_backup;\n  Event_timed et;\n  bool ret;\n\n  DBUG_ENTER(\"Events::show_create_event\");\n  DBUG_PRINT(\"enter\", (\"name: %s@%s\", dbname.str, name.str));\n\n  if (check_if_system_tables_error())\n    DBUG_RETURN(TRUE);\n\n  if (check_access(thd, EVENT_ACL, dbname.str, 0, 0, 0,\n                   is_schema_db(dbname.str, dbname.length)))\n    DBUG_RETURN(TRUE);\nthd->reset_n_backup_open_tables_state(&open_tables_backup);\n  ret= db_repository->load_named_event(thd, dbname, name, &et);\n  thd->restore_backup_open_tables_state(&open_tables_backup);\n\n  if (!ret)\n    ret= send_show_create_event(thd, &et, thd->protocol);\n\n  DBUG_RETURN(ret);\n}\nint\nEvents::fill_schema_events(THD *thd, TABLE_LIST *tables, COND *\n)\n{\n  char *db= NULL;\n  int ret;\n  Open_tables_state open_tables_backup;\n  DBUG_ENTER(\"Events::fill_schema_events\");\n\n  if (check_if_system_tables_error())\n    DBUG_RETURN(1);\nif (thd->lex->sql_command == SQLCOM_SHOW_EVENTS)\n  {\n    DBUG_ASSERT(thd->lex->select_lex.db);\n        check_access(thd, EVENT_ACL, thd->lex->select_lex.db, 0, 0, 0, 0))\n      DBUG_RETURN(1);\n    db= thd->lex->select_lex.db;\n  }\nthd->reset_n_backup_open_tables_state(&open_tables_backup);\n  ret= db_repository->fill_schema_events(thd, tables, db);\n  thd->restore_backup_open_tables_state(&open_tables_backup);\n\n  DBUG_RETURN(ret);\n}\nbool\nEvents::init(my_bool opt_noacl_or_bootstrap)\n{\n\n  THD *thd;\n  bool res= FALSE;\n\n  DBUG_ENTER(\"Events::init\");\n\n  /* We need a temporary THD during boot */\n  if (!(thd= new THD()))\n  {\n    res= TRUE;\n    goto end;\n  }\nthd->thread_stack= (char*) &thd;\n  thd->store_globals();\n  lex_start(thd);\nif (!(db_repository= new Event_db_repository))\n  {\n    res= TRUE; /* fatal error: request unireg_abort */\n    goto end;\n  }\nif (opt_noacl_or_bootstrap || Event_db_repository::check_system_tables(thd))\n  {\n    if (! opt_noacl_or_bootstrap)\n    {\n      sql_print_error(\"Event Scheduler: An error occurred when initializing \"\n                      \"system tables. Disabling the Event Scheduler.\");\n      check_system_tables_error= TRUE;\n    }\nopt_event_scheduler= EVENTS_DISABLED;\n    goto end;\n  }\nif (opt_event_scheduler == Events::EVENTS_DISABLED)\n    goto end;\n\n\n  DBUG_ASSERT(opt_event_scheduler == Events::EVENTS_ON ||\n              opt_event_scheduler == Events::EVENTS_OFF);\n\n  if (!(event_queue= new Event_queue) ||\n    !(scheduler= new Event_scheduler(event_queue)))\n  {\n    res= TRUE; /* fatal error: request unireg_abort */\n    goto end;\n  }\n\n  if (event_queue->init_queue(thd) || load_events_from_db(thd) ||\n      (opt_event_scheduler == EVENTS_ON && scheduler->start()))\n  {\n    sql_print_error(\"Event Scheduler: Error while loading from disk.\");\n    res= TRUE; /* fatal error: request unireg_abort */\n    goto end;\n  }\n  Event_worker_thread::init(db_repository);\n\nend:\n  if (res)\n  {\n    delete db_repository;\n    delete event_queue;\n    delete scheduler;\n  }\n  delete thd;\n  /* Remember that we don't have a THD */\n  my_pthread_setspecific_ptr(THR_THD,  NULL);\n\n  DBUG_RETURN(res);\n}\nvoid\nEvents::deinit()\n{\n  DBUG_ENTER(\"Events::deinit\");\n\n  if (opt_event_scheduler!= EVENTS_DISABLED)\n  {\n    delete scheduler;\n    scheduler= NULL;                            /* safety */\n    delete event_queue;\n    event_queue= NULL;                          /* safety */\n  }\n\n  delete db_repository;\n  db_repository= NULL;                          /* safety */\n\n  DBUG_VOID_RETURN;\n}\n\n\n/**\n  Inits Events mutexes\n\n  SYNOPSIS\n    Events::init_mutexes()\n      thd  Thread\n*/\n\nvoid\nEvents::init_mutexes()\n{\n  pthread_mutex_init(&LOCK_event_metadata, MY_MUTEX_INIT_FAST);\n}\n\n\n/*\n  Destroys Events mutexes\n\n  SYNOPSIS\n    Events::destroy_mutexes()\n*/\n\nvoid\nEvents::destroy_mutexes()\n{\n  pthread_mutex_destroy(&LOCK_event_metadata);\n}\nvoid\nEvents::dump_internal_status()\n{\n  DBUG_ENTER(\"Events::dump_internal_status\");\n  puts(\"\\n\\n\\nEvents status:\");\n  puts(\"LLA = Last Locked At  LUA = Last Unlocked At\");\n  puts(\"WOC = Waiting On Condition  DL = Data Locked\");\n\n  pthread_mutex_lock(&LOCK_event_metadata);\n  if (opt_event_scheduler == EVENTS_DISABLED)\n    puts(\"The Event Scheduler is disabled\");\n  else\n  {\n    scheduler->dump_internal_status();\n    event_queue->dump_internal_status();\n  }\n\n  pthread_mutex_unlock(&LOCK_event_metadata);\n  DBUG_VOID_RETURN;\n}\nbool\nEvents::switch_event_scheduler_state(enum_opt_event_scheduler new_state)\n{\n  bool ret= FALSE;\n\n  DBUG_ENTER(\"Events::switch_event_scheduler_state\");\n\n  DBUG_ASSERT(new_state == Events::EVENTS_ON ||\n              new_state == Events::EVENTS_OFF);\nif (check_if_system_tables_error())\n    DBUG_RETURN(TRUE);\n\n  pthread_mutex_lock(&LOCK_event_metadata);\n\n  if (opt_event_scheduler == EVENTS_DISABLED)\n  {\n    my_error(ER_OPTION_PREVENTS_STATEMENT,\n             MYF(0), \"--event-scheduler=DISABLED or --skip-grant-tables\");\n    ret= TRUE;\n    goto end;\n  }\n\n  if (new_state == EVENTS_ON)\n    ret= scheduler->start();\n  else\n    ret= scheduler->stop();\n\n  if (ret)\n  {\n    my_error(ER_EVENT_SET_VAR_ERROR, MYF(0), 0);\n    goto end;\n  }\n\n  opt_event_scheduler= new_state;\n\nend:\n  pthread_mutex_unlock(&LOCK_event_metadata);\n  DBUG_RETURN(ret);\n}\nbool\nEvents::load_events_from_db(THD *thd)\n{\n  TABLE *table;\n  READ_RECORD read_record_info;\n  bool ret= TRUE;\n  uint count= 0;\n  ulong saved_master_access;\n\n  DBUG_ENTER(\"Events::load_events_from_db\");\n  DBUG_PRINT(\"enter\", (\"thd: 0x%lx\", (long) thd));\nsaved_master_access= thd->security_ctx->master_access;\n  thd->security_ctx->master_access |= SUPER_ACL;\n\n  ret= db_repository->open_event_table(thd, TL_WRITE, &table);\n\n  thd->security_ctx->master_access= saved_master_access;\n\n  if (ret)\n  {\n    sql_print_error(\"Event Scheduler: Failed to open table mysql.event\");\n    DBUG_RETURN(TRUE);\n  }\n\n  init_read_record(&read_record_info, thd, table, NULL, 0, 1, FALSE);\n  while (!(read_record_info.read_record(&read_record_info)))\n  {\n    Event_queue_element *et;\n    bool created;\n    bool drop_on_completion;\n\n    if (!(et= new Event_queue_element))\n      goto end;\n\n    DBUG_PRINT(\"info\", (\"Loading event from row.\"));\n\n    if (et->load_from_row(thd, table))\n    {\n      sql_print_error(\"Event Scheduler: \"\n                      \"Error while loading events from mysql.event. \"\n                      \"The table probably contains bad data or is corrupted\");\n      delete et;\n      goto end;\n    }\n    drop_on_completion= (et->on_completion ==\n                         Event_parse_data::ON_COMPLETION_DROP);\n\n\n    if (event_queue->create_event(thd, et, &created))\n    {\n      /* Out of memory */\n      delete et;\n      goto end;\n    }\n    if (created)\n      count++;\n    else if (drop_on_completion)\n    {\nint rc= table->file->ha_delete_row(table->record[0]);\n      if (rc)\n      {\n        table->file->print_error(rc, MYF(0));\n        goto end;\n      }\n    }\n  }\n  sql_print_information(\"Event Scheduler: Loaded %d event%s\",\n                        count, (count == 1)? \"\" : \"s\");\n  ret= FALSE;\n\nend:\n  end_read_record(&read_record_info);\n\n  close_thread_tables(thd);\n\n  DBUG_RETURN(ret);\n}"}
{"id": 11, "question": "What are the available options for the event scheduler state? The opt_event_scheduler variable can be set to EVENTS_OFF, EVENTS_ON, or EVENTS_DISABLED. The var_typelib object defines the possible textual representations.", "text": "// language: C++\n#include \"mysql_priv.h\"\n#include \"events.h\"\n#include \"event_data_objects.h\"\n#include \"event_db_repository.h\"\n#include \"event_queue.h\"\n#include \"event_scheduler.h\"\nstatic const char *opt_event_scheduler_state_names[]=\n    { \"OFF\", \"ON\", \"0\", \"1\", \"DISABLED\", NullS };\n\nconst TYPELIB Events::opt_typelib=\n{\n  array_elements(opt_event_scheduler_state_names)-1,\n  \"\",\n  opt_event_scheduler_state_names,\n  NULL\n};\nstatic const char *var_event_scheduler_state_names[]= { \"OFF\", \"ON\", NullS };\n\nconst TYPELIB Events::var_typelib=\n{\n  array_elements(var_event_scheduler_state_names)-1,\n  \"\",\n  var_event_scheduler_state_names,\n  NULL\n};\n\nEvent_queue *Events::event_queue;\nEvent_scheduler *Events::scheduler;\nEvent_db_repository *Events::db_repository;\nenum Events::enum_opt_event_scheduler\nEvents::opt_event_scheduler= Events::EVENTS_OFF;\npthread_mutex_t Events::LOCK_event_metadata;\nbool Events::check_system_tables_error= FALSE;\nint sortcmp_lex_string(LEX_STRING s, LEX_STRING t, CHARSET_INFO *cs)\n{\n return cs->coll->strnncollsp(cs, (uchar *) s.str,s.length,\n                                  (uchar *) t.str,t.length, 0);\n}\nbool\nEvents::set_opt_event_scheduler(char *argument)\n{\n  if (argument == NULL)\n    opt_event_scheduler= Events::EVENTS_ON;\n  else\n  {\n    int type;\n    /*\n      type=   1   2      3   4      5\n           (OFF | ON) - (0 | 1) (DISABLE )\n    */\n    const static enum enum_opt_event_scheduler type2state[]=\n    { EVENTS_OFF, EVENTS_ON, EVENTS_OFF, EVENTS_ON, EVENTS_DISABLED };\n\n    type= find_type(argument, &opt_typelib, 1);\n\n    DBUG_ASSERT(type >= 0 && type <= 5); /* guaranteed by find_type */\n\n    if (type == 0)\n    {\n      fprintf(stderr, \"Unknown option to event-scheduler: %s\\n\", argument);\n      return TRUE;\n    }\n    opt_event_scheduler= type2state[type-1];\n  }\n  return FALSE;\n}\nconst char *\nEvents::get_opt_event_scheduler_str()\n{\n  const char *str;\n\n  pthread_mutex_lock(&LOCK_event_metadata);\n  str= opt_typelib.type_names[(int) opt_event_scheduler];\n  pthread_mutex_unlock(&LOCK_event_metadata);\n\n  return str;\n}\nbool Events::check_if_system_tables_error()\n{\n  DBUG_ENTER(\"Events::check_if_system_tables_error\");\n\n  if (check_system_tables_error)\n  {\n    my_error(ER_EVENTS_DB_ERROR, MYF(0));\n    DBUG_RETURN(TRUE);\n  }\n\n  DBUG_RETURN(FALSE);\n}\nint\nEvents::reconstruct_interval_expression(String *buf, interval_type interval,\n                                        longlong expression)\n{\n  ulonglong expr= expression;\n  char tmp_buff[128], *end;\n  bool close_quote= TRUE;\n  int multipl= 0;\n  char separator=':';\n\n  switch (interval) {\n  case INTERVAL_YEAR_MONTH:\n    multipl= 12;\n    separator= '-';\n    goto common_1_lev_code;\n  case INTERVAL_DAY_HOUR:\n    multipl= 24;\n    separator='';\n    goto common_1_lev_code;\n  case INTERVAL_HOUR_MINUTE:\n  case INTERVAL_MINUTE_SECOND:\n    multipl= 60;\ncommon_1_lev_code:\n    buf->append('\\'');\n    end= longlong10_to_str(expression/multipl, tmp_buff, 10);\n    buf->append(tmp_buff, (uint) (end- tmp_buff));\n    expr= expr - (expr/multipl)*multipl;\n    break;\n  case INTERVAL_DAY_MINUTE:\n  {\n    ulonglong tmp_expr= expr;\n\n    tmp_expr/=(24*60);\n    buf->append('\\'');\n    end= longlong10_to_str(tmp_expr, tmp_buff, 10);\n    buf->append(tmp_buff, (uint) (end- tmp_buff));// days\n    buf->append(' ');\n\n    tmp_expr= expr - tmp_expr*(24*60);//minutes left\n    end= longlong10_to_str(tmp_expr/60, tmp_buff, 10);\n    buf->append(tmp_buff, (uint) (end- tmp_buff));// hours\n\n    expr= tmp_expr - (tmp_expr/60)*60;\n}\n    break;\n  case INTERVAL_HOUR_SECOND:\n  {\n    ulonglong tmp_expr= expr;\n\n    buf->append('\\'');\n    end= longlong10_to_str(tmp_expr/3600, tmp_buff, 10);\n    buf->append(tmp_buff, (uint) (end- tmp_buff));// hours\n    buf->append(':');\n\n    tmp_expr= tmp_expr - (tmp_expr/3600)*3600;\n    end= longlong10_to_str(tmp_expr/60, tmp_buff, 10);\n    buf->append(tmp_buff, (uint) (end- tmp_buff));// minutes\n\n    expr= tmp_expr - (tmp_expr/60)*60;\n}\n    break;\n  case INTERVAL_DAY_SECOND:\n  {\n    ulonglong tmp_expr= expr;\n\n    tmp_expr/=(24*3600);\n    buf->append('\\'');\n    end= longlong10_to_str(tmp_expr, tmp_buff, 10);\n    buf->append(tmp_buff, (uint) (end- tmp_buff));// days\n    buf->append(' ');\n\n    end= longlong10_to_str(tmp_expr/3600, tmp_buff, 10);\n    buf->append(tmp_buff, (uint) (end- tmp_buff));// hours\n    buf->append(':');\n\n    tmp_expr= tmp_expr - (tmp_expr/3600)*3600;\n    end= longlong10_to_str(tmp_expr/60, tmp_buff, 10);\n    buf->append(tmp_buff, (uint) (end- tmp_buff));// minutes\n\n    expr= tmp_expr - (tmp_expr/60)*60;\n}\n    break;\n  case INTERVAL_DAY_MICROSECOND:\n  case INTERVAL_HOUR_MICROSECOND:\n  case INTERVAL_MINUTE_MICROSECOND:\n  case INTERVAL_SECOND_MICROSECOND:\n  case INTERVAL_MICROSECOND:\n    my_error(ER_NOT_SUPPORTED_YET, MYF(0), \"MICROSECOND\");\n    return 1;\n    break;\n  case INTERVAL_QUARTER:\n    expr/= 3;\n    close_quote= FALSE;\n    break;\n  case INTERVAL_WEEK:\n    expr/= 7;\n  default:\n    close_quote= FALSE;\n    break;\n  }\n  if (close_quote)\n    buf->append(separator);\n  end= longlong10_to_str(expr, tmp_buff, 10);\n  buf->append(tmp_buff, (uint) (end- tmp_buff));\n  if (close_quote)\n    buf->append('\\'');\n\n  return 0;\n}\nstatic int\ncreate_query_string(THD *thd, String *buf)\n{\nif (buf->append(STRING_WITH_LEN(\"CREATE \")))\n    return 1;\n  /* Append definer */\n  append_definer(thd, buf, &(thd->lex->definer->user), &(thd->lex->definer->host));\n  /* Append the left part of thd->query after \"DEFINER\" part */\n  if (buf->append(thd->lex->stmt_definition_begin,\n                  thd->lex->stmt_definition_end -\n                  thd->lex->stmt_definition_begin))\n    return 1;\n \n  return 0;\n}\nbool\nEvents::create_event(THD *thd, Event_parse_data *parse_data,\n                     bool if_not_exists)\n{\n  bool ret;\n  bool save_binlog_row_based, event_already_exists;\n  DBUG_ENTER(\"Events::create_event\");\nif (end_active_trans(thd))\n    DBUG_RETURN(TRUE);\n\n  if (check_if_system_tables_error())\n    DBUG_RETURN(TRUE);\nif (parse_data->check_parse_data(thd))\n    DBUG_RETURN(TRUE);\nDBUG_ASSERT(parse_data->expression || parse_data->execute_at);\n\n  if (check_access(thd, EVENT_ACL, parse_data->dbname.str, 0, 0, 0,\n                   is_schema_db(parse_data->dbname.str,\n                                parse_data->dbname.length)))\n    DBUG_RETURN(TRUE);\n\n  if (check_db_dir_existence(parse_data->dbname.str))\n  {\n    my_error(ER_BAD_DB_ERROR, MYF(0), parse_data->dbname.str);\n    DBUG_RETURN(TRUE);\n  }\n\n  if (parse_data->do_not_create)\n    DBUG_RETURN(FALSE);\nsave_binlog_row_based= thd->current_stmt_binlog_row_based;\n  thd->clear_current_stmt_binlog_row_based();\n\n  pthread_mutex_lock(&LOCK_event_metadata);\nif (!(ret= db_repository->create_event(thd, parse_data, if_not_exists,\n                                         &event_already_exists)))\n  {\n    Event_queue_element *new_element;\n    bool dropped= 0;\n\n    if (!event_already_exists)\n    {\n      if (!(new_element= new Event_queue_element()))\n        ret= TRUE;                                // OOM\n      else if ((ret= db_repository->load_named_event(thd, parse_data->dbname,\n                                                     parse_data->name,\n                                                     new_element)))\n      {\n        if (!db_repository->drop_event(thd, parse_data->dbname, parse_data->name,\n                                       TRUE))\n          dropped= 1;\n        delete new_element;\n      }\n      else\n      {\n        /* TODO: do not ignore the out parameter and a possible OOM error! */\n        bool created;\n        if (event_queue)\n          event_queue->create_event(thd, new_element, &created);\n      }\n    }\nif (!dropped)\n    {\nDBUG_ASSERT(thd->query() && thd->query_length());\n      String log_query;\n      if (create_query_string(thd, &log_query))\n      {\n        sql_print_error(\"Event Error: An error occurred while creating query string, \"\n                        \"before writing it into binary log.\");\n        ret= true;\n      }\n      else\nret= write_bin_log(thd, TRUE, log_query.c_ptr(), log_query.length());\n    }\n  }\n  pthread_mutex_unlock(&LOCK_event_metadata);\n  /* Restore the state of binlog format */\n  thd->current_stmt_binlog_row_based= save_binlog_row_based;\n\n  DBUG_RETURN(ret);\n}\nbool\nEvents::update_event(THD *thd, Event_parse_data *parse_data,\n                     LEX_STRING *new_dbname, LEX_STRING *new_name)\n{\n  int ret;\n  bool save_binlog_row_based;\n  Event_queue_element *new_element;\n\n  DBUG_ENTER(\"Events::update_event\");\nif (end_active_trans(thd))\n    DBUG_RETURN(TRUE);\n\n  if (check_if_system_tables_error())\n    DBUG_RETURN(TRUE);\n\n  if (parse_data->check_parse_data(thd) || parse_data->do_not_create)\n    DBUG_RETURN(TRUE);\n\n  if (check_access(thd, EVENT_ACL, parse_data->dbname.str, 0, 0, 0,\n                   is_schema_db(parse_data->dbname.str,\n                                parse_data->dbname.length)))\n    DBUG_RETURN(TRUE);\n\n  if (new_dbname)                               /* It's a rename */\n  {\nif (!sortcmp_lex_string(parse_data->dbname, *new_dbname,\n                             system_charset_info) &&\n        !sortcmp_lex_string(parse_data->name, *new_name,\n                             system_charset_info))\n    {\n      my_error(ER_EVENT_SAME_NAME, MYF(0));\n      DBUG_RETURN(TRUE);\n    }\nif (check_access(thd, EVENT_ACL, new_dbname->str, 0, 0, 0,\n                     is_schema_db(new_dbname->str, new_dbname->length)))\n      DBUG_RETURN(TRUE);\nif (check_db_dir_existence(new_dbname->str))\n    {\n      my_error(ER_BAD_DB_ERROR, MYF(0), new_dbname->str);\n      DBUG_RETURN(TRUE);\n    }\n  }\nsave_binlog_row_based= thd->current_stmt_binlog_row_based;\n  thd->clear_current_stmt_binlog_row_based();\n\n  pthread_mutex_lock(&LOCK_event_metadata);\nif (!(ret= db_repository->update_event(thd, parse_data,\n                                         new_dbname, new_name)))\n  {\n    LEX_STRING dbname= new_dbname? *new_dbname : parse_data->dbname;\n    LEX_STRING name= new_name? *new_name : parse_data->name;\n\n    if (!(new_element= new Event_queue_element()))\n      ret= TRUE;                                // OOM\n    else if ((ret= db_repository->load_named_event(thd, dbname, name,\n                                                   new_element)))\n    {\n      DBUG_ASSERT(ret == OP_LOAD_ERROR);\n      delete new_element;\n    }\n    else\n    {\nif (event_queue)\n        event_queue->update_event(thd, parse_data->dbname, parse_data->name,\n                                  new_element);\n      /* Binlog the alter event. */\n      DBUG_ASSERT(thd->query() && thd->query_length());\n      ret= write_bin_log(thd, TRUE, thd->query(), thd->query_length());\n    }\n  }\n  pthread_mutex_unlock(&LOCK_event_metadata);\n  /* Restore the state of binlog format */\n  thd->current_stmt_binlog_row_based= save_binlog_row_based;\n\n  DBUG_RETURN(ret);\n}\nbool\nEvents::drop_event(THD *thd, LEX_STRING dbname, LEX_STRING name, bool if_exists)\n{\n  int ret;\n  bool save_binlog_row_based;\n  DBUG_ENTER(\"Events::drop_event\");\nif (end_active_trans(thd))\n    DBUG_RETURN(TRUE);\n\n  if (check_if_system_tables_error())\n    DBUG_RETURN(TRUE);\n\n  if (check_access(thd, EVENT_ACL, dbname.str, 0, 0, 0,\n                   is_schema_db(dbname.str, dbname.length)))\n    DBUG_RETURN(TRUE);\nsave_binlog_row_based= thd->current_stmt_binlog_row_based;\n  thd->clear_current_stmt_binlog_row_based();\n\n  pthread_mutex_lock(&LOCK_event_metadata);\nif (!(ret= db_repository->drop_event(thd, dbname, name, if_exists)))\n  {\n    if (event_queue)\n      event_queue->drop_event(thd, dbname, name);\n    /* Binlog the drop event. */\n    DBUG_ASSERT(thd->query() && thd->query_length());\n    ret= write_bin_log(thd, TRUE, thd->query(), thd->query_length());\n  }\n  pthread_mutex_unlock(&LOCK_event_metadata);\n  /* Restore the state of binlog format */\n  thd->current_stmt_binlog_row_based= save_binlog_row_based;\n  DBUG_RETURN(ret);\n}\nvoid\nEvents::drop_schema_events(THD *thd, char *db)\n{\n  LEX_STRING const db_lex= { db, strlen(db) };\n\n  DBUG_ENTER(\"Events::drop_schema_events\");\n  DBUG_PRINT(\"enter\", (\"dropping events from %s\", db));\npthread_mutex_lock(&LOCK_event_metadata);\n  if (event_queue)\n    event_queue->drop_schema_events(thd, db_lex);\n  db_repository->drop_schema_events(thd, db_lex);\n  pthread_mutex_unlock(&LOCK_event_metadata);\n\n  DBUG_VOID_RETURN;\n}\nstatic bool\nsend_show_create_event(THD *thd, Event_timed *et, Protocol *protocol)\n{\n  char show_str_buf[10 * STRING_BUFFER_USUAL_SIZE];\n  String show_str(show_str_buf, sizeof(show_str_buf), system_charset_info);\n  List<Item> field_list;\n  LEX_STRING sql_mode;\n  const String *tz_name;\n\n  DBUG_ENTER(\"send_show_create_event\");\n\n  show_str.length(0);\n  if (et->get_create_event(thd, &show_str))\n    DBUG_RETURN(TRUE);\n\n  field_list.push_back(new Item_empty_string(\"Event\", NAME_CHAR_LEN));\n\n  if (sys_var_thd_sql_mode::symbolic_mode_representation(thd, et->sql_mode,\n                                                         &sql_mode))\n    DBUG_RETURN(TRUE);\n\n  field_list.push_back(new Item_empty_string(\"sql_mode\", (uint) sql_mode.length));\n\n  tz_name= et->time_zone->get_name();\n\n  field_list.push_back(new Item_empty_string(\"time_zone\",\n                                             tz_name->length()));\n\n  field_list.push_back(new Item_empty_string(\"Create Event\",\n                                             show_str.length()));\n\n  field_list.push_back(\n    new Item_empty_string(\"character_set_client\", MY_CS_NAME_SIZE));\n\n  field_list.push_back(\n    new Item_empty_string(\"collation_connection\", MY_CS_NAME_SIZE));\n\n  field_list.push_back(\n    new Item_empty_string(\"Database Collation\", MY_CS_NAME_SIZE));\n\n  if (protocol->send_fields(&field_list,\n                            Protocol::SEND_NUM_ROWS | Protocol::SEND_EOF))\n    DBUG_RETURN(TRUE);\n\n  protocol->prepare_for_resend();\n\n  protocol->store(et->name.str, et->name.length, system_charset_info);\n  protocol->store(sql_mode.str, sql_mode.length, system_charset_info);\n  protocol->store(tz_name->ptr(), tz_name->length(), system_charset_info);\n  protocol->store(show_str.c_ptr(), show_str.length(),\n                  et->creation_ctx->get_client_cs());\n  protocol->store(et->creation_ctx->get_client_cs()->csname,\n                  strlen(et->creation_ctx->get_client_cs()->csname),\n                  system_charset_info);\n  protocol->store(et->creation_ctx->get_connection_cl()->name,\n                  strlen(et->creation_ctx->get_connection_cl()->name),\n                  system_charset_info);\n  protocol->store(et->creation_ctx->get_db_cl()->name,\n                  strlen(et->creation_ctx->get_db_cl()->name),\n                  system_charset_info);\n\n  if (protocol->write())\n    DBUG_RETURN(TRUE);\n\n  my_eof(thd);\n\n  DBUG_RETURN(FALSE);\n}\nbool\nEvents::show_create_event(THD *thd, LEX_STRING dbname, LEX_STRING name)\n{\n  Open_tables_state open_tables_backup;\n  Event_timed et;\n  bool ret;\n\n  DBUG_ENTER(\"Events::show_create_event\");\n  DBUG_PRINT(\"enter\", (\"name: %s@%s\", dbname.str, name.str));\n\n  if (check_if_system_tables_error())\n    DBUG_RETURN(TRUE);\n\n  if (check_access(thd, EVENT_ACL, dbname.str, 0, 0, 0,\n                   is_schema_db(dbname.str, dbname.length)))\n    DBUG_RETURN(TRUE);\nthd->reset_n_backup_open_tables_state(&open_tables_backup);\n  ret= db_repository->load_named_event(thd, dbname, name, &et);\n  thd->restore_backup_open_tables_state(&open_tables_backup);\n\n  if (!ret)\n    ret= send_show_create_event(thd, &et, thd->protocol);\n\n  DBUG_RETURN(ret);\n}\nint\nEvents::fill_schema_events(THD *thd, TABLE_LIST *tables, COND *\n)\n{\n  char *db= NULL;\n  int ret;\n  Open_tables_state open_tables_backup;\n  DBUG_ENTER(\"Events::fill_schema_events\");\n\n  if (check_if_system_tables_error())\n    DBUG_RETURN(1);\nif (thd->lex->sql_command == SQLCOM_SHOW_EVENTS)\n  {\n    DBUG_ASSERT(thd->lex->select_lex.db);\n        check_access(thd, EVENT_ACL, thd->lex->select_lex.db, 0, 0, 0, 0))\n      DBUG_RETURN(1);\n    db= thd->lex->select_lex.db;\n  }\nthd->reset_n_backup_open_tables_state(&open_tables_backup);\n  ret= db_repository->fill_schema_events(thd, tables, db);\n  thd->restore_backup_open_tables_state(&open_tables_backup);\n\n  DBUG_RETURN(ret);\n}\nbool\nEvents::init(my_bool opt_noacl_or_bootstrap)\n{\n\n  THD *thd;\n  bool res= FALSE;\n\n  DBUG_ENTER(\"Events::init\");\n\n  /* We need a temporary THD during boot */\n  if (!(thd= new THD()))\n  {\n    res= TRUE;\n    goto end;\n  }\nthd->thread_stack= (char*) &thd;\n  thd->store_globals();\n  lex_start(thd);\nif (!(db_repository= new Event_db_repository))\n  {\n    res= TRUE; /* fatal error: request unireg_abort */\n    goto end;\n  }\nif (opt_noacl_or_bootstrap || Event_db_repository::check_system_tables(thd))\n  {\n    if (! opt_noacl_or_bootstrap)\n    {\n      sql_print_error(\"Event Scheduler: An error occurred when initializing \"\n                      \"system tables. Disabling the Event Scheduler.\");\n      check_system_tables_error= TRUE;\n    }\nopt_event_scheduler= EVENTS_DISABLED;\n    goto end;\n  }\nif (opt_event_scheduler == Events::EVENTS_DISABLED)\n    goto end;\n\n\n  DBUG_ASSERT(opt_event_scheduler == Events::EVENTS_ON ||\n              opt_event_scheduler == Events::EVENTS_OFF);\n\n  if (!(event_queue= new Event_queue) ||\n     !(scheduler= new Event_scheduler(event_queue)))\n  {\n    res= TRUE; /* fatal error: request unireg_abort */\n    goto end;\n  }\n\n  if (event_queue->init_queue(thd) || load_events_from_db(thd) ||\n      (opt_event_scheduler == EVENTS_ON && scheduler->start()))\n  {\n    sql_print_error(\"Event Scheduler: Error while loading from disk.\");\n    res= TRUE; /* fatal error: request unireg_abort */\n    goto end;\n  }\n  Event_worker_thread::init(db_repository);\n\nend:\n  if (res)\n  {\n    delete db_repository;\n    delete event_queue;\n    delete scheduler;\n  }\n  delete thd;\n  /* Remember that we don't have a THD */\n  my_pthread_setspecific_ptr(THR_THD,  NULL);\n\n  DBUG_RETURN(res);\n}\nvoid\nEvents::deinit()\n{\n  DBUG_ENTER(\"Events::deinit\");\n\n  if (opt_event_scheduler!= EVENTS_DISABLED)\n  {\n    delete scheduler;\n    scheduler= NULL;                            /* safety */\n    delete event_queue;\n    event_queue= NULL;                          /* safety */\n  }\n\n  delete db_repository;\n  db_repository= NULL;                          /* safety */\n\n  DBUG_VOID_RETURN;\n}\n\n\n/**\n  Inits Events mutexes\n\n  SYNOPSIS\n    Events::init_mutexes()\n      thd  Thread\n*/\n\nvoid\nEvents::init_mutexes()\n{\n  pthread_mutex_init(&LOCK_event_metadata, MY_MUTEX_INIT_FAST);\n}\n\n\n/*\n  Destroys Events mutexes\n\n  SYNOPSIS\n    Events::destroy_mutexes()\n*/\n\nvoid\nEvents::destroy_mutexes()\n{\n  pthread_mutex_destroy(&LOCK_event_metadata);\n}\nvoid\nEvents::dump_internal_status()\n{\n  DBUG_ENTER(\"Events::dump_internal_status\");\n  puts(\"\\n\\n\\nEvents status:\");\n  puts(\"LLA = Last Locked At  LUA = Last Unlocked At\");\n  puts(\"WOC = Waiting On Condition  DL = Data Locked\");\n\n  pthread_mutex_lock(&LOCK_event_metadata);\n  if (opt_event_scheduler == EVENTS_DISABLED)\n    puts(\"The Event Scheduler is disabled\");\n  else\n  {\n    scheduler->dump_internal_status();\n    event_queue->dump_internal_status();\n  }\n\n  pthread_mutex_unlock(&LOCK_event_metadata);\n  DBUG_VOID_RETURN;\n}\nbool\nEvents::switch_event_scheduler_state(enum_opt_event_scheduler new_state)\n{\n  bool ret= FALSE;\n\n  DBUG_ENTER(\"Events::switch_event_scheduler_state\");\n\n  DBUG_ASSERT(new_state == Events::EVENTS_ON ||\n              new_state == Events::EVENTS_OFF);\nif (check_if_system_tables_error())\n    DBUG_RETURN(TRUE);\n\n  pthread_mutex_lock(&LOCK_event_metadata);\n\n  if (opt_event_scheduler == EVENTS_DISABLED)\n  {\n    my_error(ER_OPTION_PREVENTS_STATEMENT,\n             MYF(0), \"--event-scheduler=DISABLED or --skip-grant-tables\");\n    ret= TRUE;\n    goto end;\n  }\n\n  if (new_state == EVENTS_ON)\n    ret= scheduler->start();\n  else\n    ret= scheduler->stop();\n\n  if (ret)\n  {\n    my_error(ER_EVENT_SET_VAR_ERROR, MYF(0), 0);\n    goto end;\n  }\n\n  opt_event_scheduler= new_state;\n\nend:\n  pthread_mutex_unlock(&LOCK_event_metadata);\n  DBUG_RETURN(ret);\n}\nbool\nEvents::load_events_from_db(THD *thd)\n{\n  TABLE *table;\n  READ_RECORD read_record_info;\n  bool ret= TRUE;\n  uint count= 0;\n  ulong saved_master_access;\n\n  DBUG_ENTER(\"Events::load_events_from_db\");\n  DBUG_PRINT(\"enter\", (\"thd: 0x%lx\", (long) thd));\nsaved_master_access= thd->security_ctx->master_access;\n  thd->security_ctx->master_access |= SUPER_ACL;\n\n  ret= db_repository->open_event_table(thd, TL_WRITE, &table);\n\n  thd->security_ctx->master_access= saved_master_access;\n\n  if (ret)\n  {\n    sql_print_error(\"Event Scheduler: Failed to open table mysql.event\");\n    DBUG_RETURN(TRUE);\n  }\n\n  init_read_record(&read_record_info, thd, table, NULL, 0, 1, FALSE);\n  while (!(read_record_info.read_record(&read_record_info)))\n  {\n    Event_queue_element *et;\n    bool created;\n    bool drop_on_completion;\n\n    if (!(et= new Event_queue_element))\n      goto end;\n\n    DBUG_PRINT(\"info\", (\"Loading event from row.\"));\n\n    if (et->load_from_row(thd, table))\n    {\n      sql_print_error(\"Event Scheduler: \"\n                      \"Error while loading events from mysql.event. \"\n                      \"The table probably contains bad data or is corrupted\");\n      delete et;\n      goto end;\n    }\n    drop_on_completion= (et->on_completion ==\n                         Event_parse_data::ON_COMPLETION_DROP);\n\n\n    if (event_queue->create_event(thd, et, &created))\n    {\n      /* Out of memory */\n      delete et;\n      goto end;\n    }\n    if (created)\n      count++;\n    else if (drop_on_completion)\n    {\nint rc= table->file->ha_delete_row(table->record[0]);\n      if (rc)\n      {\n        table->file->print_error(rc, MYF(0));\n        goto end;\n      }\n    }\n  }\n  sql_print_information(\"Event Scheduler: Loaded %d event%s\",\n                        count, (count == 1)? \"\" : \"s\");\n  ret= FALSE;\n\nend:\n  end_read_record(&read_record_info);\n\n  close_thread_tables(thd);\n\n  DBUG_RETURN(ret);\n}"}
{"id": 5, "generator": "claude-3-sonnet-20240229", "position": "Level 1 Node 0", "flag": "normal", "question": {"question": "根据对《秘传保健药酒配制1200方》的描述,请按配方类型的顺序排列出书中介绍的八个章节名称,并确定每个章节涵盖的保健或治疗主题相关联的人体系统或症状类型是什么?", "questionCategory": "causal reasoning", "comprehension": "semantic"}, "answer": "根据提供的摘要,这本书总共分为二十九个章节,涵盖的主题和相关人体系统或症状如下:第一节 未提及第二节 伤风感冒 - 涉及呼吸系统疾病第三节 肺系统疾病第四节 皮肤科 - 涉及各种皮肤病第五节 未提及第六节 未提及 第七节 未提及第八节 未提及第九节 未提及第十节 妇科 - 涉及女性生殖系统疾病第十一节 男科 - 涉及男性生殖系统疾病第十二节 儿科 - 涉及治疗小儿疾病第十三节 骨伤科 - 涉及骨骼和肌肉问题第十四节 骨质疏松症第十五节 外伤出血第十六节 破伤风第十七节 外伤性截瘫 第十八节 冻伤第十九节 疯狗咬伤第二十节 水火烫伤第二十一节 毒蛇咬伤其余章节未提及具体内容。", "length": 15247, "text": "秘传保健药酒配制1200方\n《秘传保健药酒配制1200方》是化学工业出版社出版的图书,作者是刘步平 (编者), 方春平 (编者)。内容简介 《秘传保健药酒配制1200方》精心选取了疗效确切的药酒配方1200多首,详细介绍了具有养颜嫩肤、祛斑增白、降脂减肥、养脑益智、强筋壮骨、延年益寿等功效的保健药酒配方,以及临床心血管科、消化科、妇科、男科、骨伤科等各科常见病的药酒验方,每首配方都介绍了原料、制作、功效、主治、注意等内容。最后还介绍了药酒制作和使用时的注意事项。药酒在我国的使用历史已超过几千年,是人们防病治病、养生保健、延年益寿的佳品。《秘传保健药酒配制1200方》可为养生保健爱好者选用药酒提供指导,也可为医疗、科研、生产单位等研究开发药酒提供参考。 目录 第一章 秘传养生药酒 第一节 养颜嫩肤酒1?人参肉桂酒2?人参酒3?三圣参术酒4?天真酒5?四花逡巡酒6?四补苁蓉酒7?甘菊还童酒8?龙眼枸杞酒9?当归龙眼酒10?杞参麦杏酒11?参归美容酒12?参术枣姜酒13?参芪三白酒14?苓菊养荣酒15?桃仁朱砂酒16?猪脂玉液酒17?猪膏姜汁酒18?黄精苍术酒19?滋阴补血酒20?葡萄干酿酒21?橘皮酒第二节 祛斑增白酒1?牛羊双胆酒2?龙桂三仙酒3?龙眼当归酒4?地黄驻颜酒5?杏仁酒6?鸡子美容酒7?制白附子酒8?地骨商陆酒9?党参枸杞酒10?桃花白芷酒11?雄鸡酒12?槟榔陈皮露13?槟榔桃花露第三节 乌须黑发酒1?一醉散酒2?七宝美髯酒3?乌发益寿酒4?乌须酒(一)5?乌须酒(二)6?五精酒7?生地黄酿酒8?地黄牛膝酒9?芝麻酒10?芪归乌须酒11?补血顺气酒12?龟台回童酒13?固本地黄酒14?枸杞芝地酒15?美髯酒16?耐老酒17?首乌三豆酒18?首乌归地酒19?首乌茯苓酒20?桑椹酢浆酒21?常春枸杞酒22?康壮酒23?熟地杞檀酒24?熟地栀子酒第四节 生发护发酒1?三味侧柏酒2?双花二乌酊3?生姜牛黄酊4?羊椒碎补酊5?花椒酒6?诃子山柰酒7?侧柏三黄酒8?侧柏酒9?养血生发酒10?复方藜芦酊11?神应养真酒12?首乌生地酒13?首乌固发酒14?骨碎斑蝥酒15?脱发再生酊16?野菊香芷酒17?银花酒18?斑蝥侧柏酒19?斑蝥酒20?碎补首乌酒21?蔓荆附子酒22?熟地杞沉酒第五节 降脂减肥酒1?大蒜酒2?山楂丹参酒3?山楂麦冬酒4?玉竹长寿酒5?枸杞银花酒6?茱萸杜仲酒7?首乌黄精酒8?香菇山楂酒9?香菇柠檬酒10?党参山楂酒11?绿茶蜂蜜酒第六节 养脑益智酒1?人参益智酒2?五加远榆酒3?五味子酒4?归脾养心酒5?石燕酒6?龙眼酒7?羊肾仙茅酒8?远志菖蒲酒9?麦杞补心酒10?参杞精神酒11?首乌五味酒12?读书丸酒13?菖蒲骨脂酒14?黄精苁蓉酒第七节 强筋壮骨酒1?三味杜仲酒2?天雄茵芋酒3?左归酒4?龙羊健步酒5?地冬首乌酒6?当归天冬酒7?苁蓉金刚酒8?附子杜仲酒9?狗脊丹参酒10?虎骨萆薢酒11?虎鹿杞龙酒12?蒜豉酒第八节 强身健体酒1?人参枸杞酒2?人参黄芪酒3?人参葡萄酒4?三味抗衰酒5?乌鸡参归酒6?乌蛇黄芪酒7?五加地骨酒8?双乌暖胃酒9?双参益气酒10?双蜂强身酒11?归芪术芍酒12?归虎壮血酒13?白鸽血竭酒14?龙参玉灵酒15?地黄酒16?竹根七酒17?羊肉木香酒18?虫草壮元酒19?扶衰仙凤酒20?杞芪王益酒21?龟胶金樱酒22?参归养荣酒23?河车麦冬酒24?轻身酒25?钟乳石斛酒26?钟乳苁蓉酒27?首乌枸杞酒28?桃金娘酒29?桑椹杞龙酒30?益气补虚酒31?莲子猪肠酒32?鹿茸人参酒33?鹿茸虫草酒34?黄芪红花酒35?黄柏知母酒第九节 延年益寿酒1?一醉不老酒2?人参当归酒3?人参百岁酒4?人参固本酒5?山萸还少酒6?中藏延寿酒7?五子益精酒8?五子螵蛸酒9?五加皮酒10?长生固本酒11?四季春补酒12?玉竹高龄酒13?地黄滋补酒14?延年益寿酒15?杞龙延龄酒16?参苓固本酒17?松子菊花酒18?松龄太平酒19?复方虫草酒20?春寿酒21?枸杞鹤龄酒22?桑椹苍术酒23?益阴延年酒24?菖郁万寿酒25?黄精枸杞酒 第二章 秘传治病药酒 第一节 呼吸科一、感冒1?人参姜蜜酒2?肉桂酒3?防风苍耳酒4?姜蒜柠檬酒5?茶叶姜汁酒6?荆芥葱豉酒7?荔枝煮酒8?桑菊酒9?淡豆豉酒10?葡萄鸡蛋酒11?葱豉酒二、咳嗽1?山药酒2?百部重楼酒3?阿胶蛋黄酒4?陈皮酒5?龟肉酒6?油酥蜜酒7?郁李仁酒8?复方樟脑酊9?柚子酒10?桑叶酒11?猪肝大枣酒12?紫苏陈皮酒13?葶苈酒14?蜇硝荸荠酒15?蜂蜜鸡蛋酒三、哮喘1?人参蛤蚧酒2?千日红花酒3?大枣桃杏酒4?牛膝五味酒5?四味花椒酒6?竹黄酒7?芝麻胡桃酒8?苍耳咳喘酒9?苏子陈皮酒10?苏芥三子酒11?柑树叶酒12?胡桃酒13?峨参酒14?桑白皮酒15?桑皮姜萸酒16?消咳喘酒17?猪胰酒18?猪脬大枣酒19?紫苏大枣酒20?紫苏陈皮酒21?紫菀香豉酒22?葡萄冰糖酒23?葶苈防己酒24?蛤蚧参芪酒25?鹌鹑酒26?橘红酒四、肺脓肿1?金荞麦酒2?苇茎腥银酒3?薏苡芡实酒4?银翘三仁酒第二节 消化科一、消化不良1?三香神仙酒2?山楂龙眼酒3?苍白二术酒4?陈皮山楂酒5?神曲酒6?草果山楂酒7?草果陈皮酒8?健脾益气酒二、腹胀腹痛1?丁香山楂酒2?丁香厚朴酒3?三蔻姜桂酒4?五味九香酒5?肉丁救急酒6?虎杖桃仁酒7?砂仁橘红酒8?胡桃刺梨酒三、呃逆1?丁香柿蒂酒2?干姜附子酒3?姜汁葡萄酒4?熟地枸杞酒四、呕吐1?良姜藿香酒2?复方半夏酒3?茴香姜汁酒4?萸根麻陈酒5?薄荷酊五、噎嗝1?启膈酒2?除噎酒3?荸荠降逆酒六、便秘1?三黄朴草酒2?大黄附子酒3?双耳冰糖酒4?生地羊脂酒5?韭菜汁酒七、泄泻1?大蒜红糖酒2?双白花粉酒3?地瓜藤酒4?附子酒5?苓术酒6?姜附温脾酒7?猪胰大枣酒八、便血1?地榆茅根酒2?刺五加酒3?萱草根酒九、慢性胃炎1?人参半夏酒2?山楂槟榔酒3?术苓银花酒4?地榆青木酒5?佛手露酒十、肠梗阻1?大黄楝皮酒2?木瓜牛膝酒3?沉香猪脂酒4?麸荚葱姜酒十一、阑尾炎1?托毒排脓酒2?皂角乳香酒3?金银花酒第三节 心血管科一、高血压1?不老菊花酒2?地龙酒3?杜仲通草酒4?杜仲酒5?补益龙眼酒6?松鹤补酒7?桑椹酒8?菊花生地酒9?菖蒲木瓜酒10?嫩竹酒二、脑动脉硬化1?天麻健脑酒2?延年益寿酒3?松叶酒三、冠心病1?大蒜葡萄酒2?山楂瓜蒌酒3?丹参薤白酒4?双参山楂酒5?虫草薤白酒6?瓜葛红花酒四、心动过缓鹿茸酒五、脑卒中及其后遗症1?补血壮骨酒2?敦煌佛赐酒3?八仙庆寿酒4?石南防风酒5?鸡屎黑豆酒6?牛蒡枳壳酒7?白花全蝎酒8?白蛇独活酒9?独活牛膝酒10?黑豆桂枝酒11?蚕沙芪归酒12?川芎羌活酒13?当归细辛酒14?二活川芎酒15?黑豆丹参酒16?蔓菊白术酒17?三才五味酒18?威灵苍术酒19?息风活络酒20?皂荚南星酒第四节 血液科一、贫血1?山药葡萄酒2?龙眼大枣酒3?李子蜂蜜酒4?桑椹蜂蜜酒二、白细胞减少症生白扶正酒第五节 泌尿科一、泌尿系感染1?车前草酒2?地榆木通酒3?茄叶酒4?南藤酒5?眼子菜酒6?慈竹叶酒7?腹水草酒二、泌尿系结石1?石韦木通酒2?芒硝滑石酒3?金钱草酒4?胡桃内金酒三、水肿1?二桑酒2?芫花菟丝酒3?桃皮木通酒4?海藻茯苓酒5?通草灯心酒6?葫芦酒7?黑豆火麻酒四、遗尿1?仙茅益智酒2?鸡肝肉桂酒3?茱萸益智酒4?茴香桑螵酒五、尿潴留1?牛膝酒2?商陆酒3?菟苁通胞酒4?酢浆车前酒第六节 神经精神科一、头痛1?川芎白芷酒2?白芷薄荷酒3?全蝎神圣酒4?当归白芷酒5?两皮全蝎酒6?细辛蔓荆酒7?猪脑生姜酒8?黄连酒9?蔓荆川芎酒二、眩晕1?人参五味酒2?三仙酒3?女贞子酒4?山萸苁蓉酒5?复方女贞酒6?枸杞龙眼酒7?枸杞苍膝酒8?首乌芝麻酒9?桂豉酒10?菊花首乌酒11?鹿茸羊肾酒三、失眠1?合欢皮酒2?百益长春酒3?杞枣香橼酒4?补骨脂酒5?鸡睾龙眼酒6?枸杞百合酒7?茯苓酒8?莲子酒9?梅合双花酒10?黄精壮身酒11?熟地枸杞酒四、神经衰弱1?二参黄精酒2?人参天麻酒3?人参果酒4?巴戟羊藿酒五、面瘫1?全蝎地龙酒2?松叶防风酒3?春风三藤酒4?牵正酒5?独活牵正酒6?桂枝防风酒7?蚕沙川芎酒六、癔病1?缬草五味酒2?缬草全蝎酒七、神经官能症1?古汉养生酒2?莎草酒八、坐骨神经痛1?风湿酒2?归芪双乌酒3?狗骨酒第七节 内分泌科一、糖尿病1?凤眼草酒2?石斛麦地酒3?芪地二参酒4?枸精麦地酒5?蚕蛹煮酒6?菟丝酒二、类风湿性关节炎1?三乌追健酒2?乌头木瓜酊3?五蛇酒4?长宁风湿酒5?风湿酒6?全蝎蜈蚣酒7?抗风湿I号酒8?抗风湿II号酒9?复方三蛇酒10?复方雷公藤酒11?追风酒12?蜈蚣白蛇酒13?蕲蛇红花酒第八节 传染科一、水痘荸荠酒二、麻疹1?芫荽麻黄酒2?芫荽浮萍酒三、风疹牛蒡蝉蜕酒四、百日咳1?土牛兰草酒2?猪肠葱实酒五、流行性感冒1?芷羌搐鼻酒2?苦参板蓝酒3?桑菊酒六、肺结核1?洋参百部酒2?夏枯草酒3?桑皮仙鹤酒七、细菌性痢疾1?大黄酒2?山楂红糖酒3?双炭内金酒4?生姜白芍酒5?艾叶陈皮酒6?地榆附子酒7?活血导滞酒8?路路通酒第九节 外科一、疖1?龙葵草酒2?防风首乌酒3?刺针草酒4?野菊花叶酒5?酸甜石榴酒6?蝮蛇地丁酒二、甲沟炎大黄栀子酒三、足底疔藤黄酒四、痈1?止痛灵2?牛蒡地黄酒3?甘草麝香酒4?立效酒5?如意酒6?阳春酒7?两皮酒8?远志酒9?金银花藤酒10?复方藤黄酒11?柳树皮酒12?神效酒13?瓜蒌甘草酒五、瘰疬1?刀豆鸭蛋酒2?内消酒3?玄参磁石酒4?白头翁酒5?老蛇盘酒6?海藻乌蛇酒7?蜘蛛浸酒8?瘰疬酒9?鳖甲酒六、瘿1?复方黄药子酒2?急性子酒3?柳根酒4?海藻昆布酒5?消瘿酒6?紫菜黄药酒七、乳腺炎1?大九股牛酒2?川楝子酒3?元宝草酒4?丝瓜络酒5?白果酒6?红砂糖酒7?牡荆子酒8?玫瑰煮酒9?苦地胆根酒10?菊花公英酒11?蛇蜕酒12?银花大黄酒13?银花公英酒14?紫花地丁酒15?蒲公英内服酒八、乳腺增生1?虎刺根酒2?鳝鱼皮酒九、痔疮1?二甲酒2?大茄子酒3?大黄地榆酒4?血三七酒5?花蝴蝶升麻酒6?苦参公英酒7?槐枝苍耳酒8?槐枝槐皮酒十、血栓闭塞性脉管炎1?阳和解凝酒2?爬山猴酒3?祛寒通络酒I4?祛寒通络酒II5?通利血脉酒6?温经通络酒第十节 妇科一、月经先期量多1?十全大补酒2?地榆酒3?铁树叶酒4?猪皮红糖酒5?黑豆淡菜酒二、月经后期量少1?月季红花酒2?木耳胡桃酒3?红花酒4?红茶葡萄酒5?佛手砂仁酒6?茴香桂枝酒7?桑椹黄精酒8?鹿角霜酒三、月经先后无定期1?八珍酒2?小茅香酒3?月季蒲黄酒4?当归加皮酒5?当归红花酒6?当归吴萸酒7?血藤归参酒8?花蝴蝶酒9?补气调经酒10?鸡血藤酒11?枸杞杜仲酒12?香附红花酒13?蓼根当归酒14?薯莨酒四、经期延长1?大黄酒2?丹参延胡酒五、经间期出血1?鸡血小麦酒2?茴香青皮酒3?棉花籽酒六、闭经1?大黄三七酒2?川芎鸡蛋酒3?马鞭草酒4?月季当归酒5?牛膝麻仁酒6?当归干漆酒7?牡丹月季酒8?参茸补血酒9?凌霄花酒10?桑椹红花酒11?益母黑豆酒12?益母当归酒13?紫河车酒14?蒲黄双豆酒七、痛经1?人参白芍酒2?三草双花酒3?山楂玫瑰酒4?丹参红花酒5?凤仙黑豆酒6?归芎郁金酒7?归附温经酒8?艾芎鸡蛋酒9?当归延胡酒10?当归黄芪酒11?红花苏木酒12?血竭艾芎酒13?茜草根酒14?荔枝苏木酒15?香附佩兰酒16?益母丹参酒17?鸭蛋姜片酒18?菖蒲活麻酒19?滋阴止痛酒20?黑豆鸡蛋酒八、经行乳房胀痛留行山甲酒九、更年期综合征黄精枸杞酒十、习惯性流产1?赤豆芽酒2?急性子酒十一、堕胎小产1?生地蒲黄酒2?蒲黄槐角酒十二、难产1?加味龟甲酒2?蛋黄酒3?蟹爪酒十三、产后血晕1?红花酒2?参附酒3?逐血调中酒十四、产后腹痛1?补中当归酒2?归红箭羽酒3?刘寄奴酒4?当归芍酒5?羌活酒6?芹菜籽酒7?鱼腥草酒8?益母草酒十五、产后痉症1?归芪酒2?白术黑豆酒3?当归芥穗酒4?鸡粪酒5?寄生黑豆酒十六、产后身痛1?双活人参酒2?僵蚕豆淋酒3?石斛附子酒4?独活肉桂酒5?黄芪防风酒6?黑豆大枣酒十七、产后便秘1?双仁酒2?加味四物酒十八、产后缺乳1?大枣糯米甜酒2?奶浆参酒3?米酒煮虾米4?红糖花生酒5?鱼灰酒6?瓜蒌酒7?涌泉酒8?通草钟乳酒9?猪蹄通草酒十九、产后胁痛1?芎归泻肝酒2?柴胡白术酒二十、产后虚弱1?五加皮酒2?当归续断酒3?杜仲肉桂酒4?灵芝龙眼酒5?金银花藤酒6?糯米米酒二十一、不孕1?二根茴香酒2?巴戟归芪酒3?延寿获嗣酒4?宜男酒5?养精种玉酒6?种玉酒7?草苁蓉酒8?排卵酒9?淫羊益母酒二十二、子宫脱垂1?八月札酒2?小金樱酒3?月季花红酒4?归芪升麻酒二十三、盆腔炎1?大蓟黄柏酒2?干姜白芍酒3?夏枯山甲酒4?淡菜韭菜酒5?槐米牡蛎酒二十四、子宫肌瘤1?山楂血藤酒2?当归蒲延酒二十五、子宫内膜异位症1?山楂红花酒2?当归肉桂酒3?乳香没药酒4?莪术失笑酒二十六、外阴瘙痒1?四子酒2?南木香酒第十一节 男科一、性早熟1?知柏生地酒2?柴丹栀子酒二、性欲减退1?双鞭壮阳酒2?羊藿木瓜酒3?明虾酒4?枸杞酒5?海狗肾酒三、遗精1?巴戟二子酒2?地黄枸杞酒3?补肾填精酒4?金樱子酒5?益肾固精酒6?滋阴止遗酒四、早泄1?三鞭双地酒2?巴戟熟地酒3?锁阳苁蓉酒五、阳痿1?人参鹿茸酒2?三石酒3?五子螵蛸酒4?巴戟牛膝酒5?仙茅羊藿酒6?羊肉木香酒7?羊藿金樱酒8?补肾壮阳酒9?补肾延寿酒10?刺猬皮酒11?板栗猪肾酒12?狗肾枸杞酒13?钟乳附子酒14?韭菜益智酒15?海马参茸酒16?雪莲虫草酒17?麻雀菟丝酒18?胡芦巴酒19?熟地枸杞酒20?醉虾酒21?震痿酒六、不育1?九子生精酒2?山萸菟丝酒3?生精酒4?多子酒5?补肾生精酒6?还春酒7?鸡睾酒8?青松龄酒9?种子酒10?胡桃四花酒11?续嗣降生酒12?鹿龄集酒13?毓麟酒七、前列腺炎1?二山芡实酒2?小茴香酒3?荠菜酒4?萆薢酒八、前列腺增生1?胡桃五味酒2?黄芪白芍酒九、阴囊湿疹1?五子黄柏酒2?苦参豨莶酒3?茼蒿酒十、疝气1?吴萸茴香酒2?花椒延胡酒3?闹羊紫荆酒4?茴香酒5?海藻酒6?橘荔双核酒第十二节 儿科一、小儿发育不良鹿茸山药酒二、小儿发热1?三味葱白酒2?羊脂大枣酒3?栀子桃仁酒三、小儿感冒1?吴萸白矾酒2?香薷苏叶酒3?葱实姜盐酒四、小儿暑疖1?公英外敷酒2?苦参大黄酒五、小儿遗尿1?鸡肠酒2?雄鸽当归酒六、小儿厌食栀子丁香酒七、小儿虫证1?百部酊2?青梅酒八、小儿泄泻1?红砂糖酒2?花椒肉桂酒3?香附酒九、小儿呕吐1?干生二姜酒2?生姜食醋酒十、小儿惊风1?牛黄钟乳酒2?清肝息风酒十一、小儿疳证白鱼竹茹酒十二、小儿癫痫1?防己莽草酒2?紫石铁精酒十三、小儿肺炎大黄芩连酒十四、小儿口腔溃疡三黄酒十五、新生儿硬肿症艾叶韭菜酒第十三节 骨伤科一、跌打损伤1?二花白矾酒2?三七跌打酒3?三皮郁金酒4?土鳖虫酒5?山姜茜草酒6?内伤白酒7?凤仙归尾酒8?少林八仙酒9?见血飞酒10?风伤擦剂11?生地桃仁酒12?刘寄奴酒13?当归芷竭酒14?红花苏木酒15?没药鸡子酒16?岩陀香藤酒17?玫瑰红花酒18?金雀花酒19?复方红花酒20?桃红活血酒21?散血破瘀酒22?紫金酒二、闪扭伤1?土鳖红花酒2?大黄红花酒3?闪挫止痛酒4?伤痛灵擦剂5?参胡杜仲酒6?按摩酒7?桂枝当归酒8?三棱跌打酒三、腰肌劳损1?益肾补骨酒2?扶芳藤酒四、骨折1?二乌透骨酒2?茴香樟脑酒3?桂红当归酒4?接骨续筋酒五、脱位1?壮筋补血酒2?整骨麻酒六、颈椎病1?龟甲蛤蚧酒2?茄皮鹿角酒七、肩周炎1?五虫酒2?消炎止痛酒3?漏肩风酒八、骨质增生1?二乌骨刺酒2?抗骨刺酒3?苁蓉骨刺酒4?复方当归酒5?威灵羊藿酒6?骨质增生酒7?强骨灵酒九、腰椎间盘突出症紫荆活血酒十、网球肘药棒酒十一、膝关节滑膜炎外敷白芷酒十二、关节疼痛1?当归松叶酒2?羊胫骨酒3?肉桂黄芪酒4?防风白术酒5?防风松叶酒6?防风茜草酒7?防风秦艽酒8?伸筋草酒9?抗风湿酒10?附子白术酒11?附子细辛酒12?参茸追风酒13?国公酒14?夜合枝酒15?茄根酒16?虎骨川芎酒17?虎骨白芍酒18?虎骨追风酒19?复方穿山龙酒20?活血舒筋酒21?独活南藤酒22?祛风调荣酒23?祛风酒24?络石仙茅酒25?胡蜂酒26?茵芋萆薢酒27?草乌威灵酒28?首乌地冬酒29?桑枝加皮酒30?海风藤酒31?海桐皮牛膝酒32?秦艽酒33?酒外擦方34?寄生骨痛酒35?排风酒36?麻黄骨痛酒十三、腰腿疼痛1?三黄参归酒2?三痹酒3?千年健酒4?千金杜仲酒5?川乌杜仲酒6?乌藤酒7?五加皮酒8?五积散酒9?巴戟牛膝酒10?牛蒡茵芋酒11?牛膝石斛酒12?牛膝参芪酒13?牛膝虎骨酒14?牛膝独活酒15?车前葱枣酒16?长松酒17?风湿骨痛酒18?加味地黄酒19?加味养生酒20?生地羌活酒21?白石英酒22?白花蛇酒23?延年石斛酒24?伸筋乌头酒25?杜仲加皮酒26?补肾酒27?参桂养荣酒28?狗脊马鞭酒29?狗脊黑��酒30?肾着酒31?虎骨当归酒32?鱼鳔鹿角酒33?威灵仙酒34?独活当归酒35?独活参附酒36?珍珠腰痛酒37?胡桃全蝎酒38?茵芋薏苡酒39?草乌薏苡酒40?追风酒41?钟乳石酒42?首乌薏苡酒43?骨痛酒44?桐皮薏苡酒45?寄生地归酒46?甜瓜子酒47?萆薢除湿酒48?萆薢附子酒49?鹿角杜仲酒50?鹿角腰痛酒十四、骨质疏松症1?人参枸杞酒2?当归枸杞酒十五、外伤出血1?白背三七酒2?红旱莲酒十六、破伤风1?山甲酒2?天麻四虫酒3?威灵独蒜酒4?雀屎酒5?蜜蜡酒十七、外伤性截瘫1?山虎洋参酒2?截瘫药酒十八、冻伤1?丁香酒2?二乌茴香酒3?二椒樟脑酊4?当归留行酊5?红花干姜酒6?防冻酊十九、疯狗咬伤1?七星剑酒2?华山矾酒3?板蓝根酒4?草兰根酒5?荔枝草酒二十、水火烫伤1?大黄槐角酒2?鸡蛋清外涂酒3?复方五加皮酒4?复方芩茶酒5?烧伤酒6?烧伤酒方17?烧伤酒方28?莲榆酒二十一、毒蛇咬伤1?九龙吐珠酒2?复方扁豆酒3?热酒4?救必应酒5?蛇伤酒第四节 皮肤科一、稻田性皮炎1?九里香酒2?五倍白矾酒3?樟脑冰片酊二、神经性皮炎1?土苯酚2?外擦酒3?红花冰片酒4?细辛姜桂酒5?苦参长卿酒6?复方斑蝥酒7?神经性皮炎酒三、脂溢性皮炎1?白鲜生地酒2?皮炎液3?苦参凤眼酒四、虫咬皮炎1?丁香薄荷酊2?重楼酒五、毛囊炎藤黄苦参酒六、湿疹1?土槿皮酒2?止痒酒I3?蛇床苦参酒4?黄柏地肤酒七、荨麻疹1?白茄根酒2?石南肤子酒3?红花乌梅酒4?松叶酒5?枳壳秦艽酒6?浮萍酒7?蜂房苦参酒8?蝉蜕糯米甜酒八、白癜风1?乌蛇酒2?无花果酒3?白癜风酒4?补骨前胡酊5?补骨密陀酊6?菟丝子酊九、牛皮癣1?马钱二黄酒2?五蛇酒3?牛皮癣酒4?四虎二黄酒5?复方洋金酒6?喜树酚7?斑蝥青皮酒8?蜈蚣蛤蟆酒9?蝮蛇人参酒10?癣药酒十、痱子1?三黄参冰酊2?地龙茶叶酊十一、疥疮1?水菖蒲酒2?灭疥灵3?白鲜百部酒4?百部蛇床酊5?龟甲酒十二、鹅掌风1?一号癣药水2?生姜浸酒3?当归百部酒4?羊蹄草酒5?复方土槿酊十三、足癣硝银白矾酊十四、癣类杂病1?一号癣药水2?二号癣药水3?止痒酒4?去癣酒5?甘草升麻酒6?百部大风酒7?克癣液8?参白癣药水9?苦参鲜皮酒10?复方雪花酒11?复方蟾蜍酒12?鸦胆百部酒13?斑黄酒十五、痤疮1?大黄冰片酊2?冬瓜酒3?苦参百部酊4?重楼酒十六、带状疱疹1?三花止痒酊2?石膏酒3?矾冰酒4?金银花酒5?南星重楼酒6?银菊凤床酒7?雄黄酒十七、皮肤瘙痒1?百部草酊2?枳实酒3?活血止痒酒4?神蛇酒5?黄芪续断酒6?蝉蜕鲜皮酒十八、虱1?止痒酒II2?灭虱酒3?百部槟榔酒4?除虱酒十九、疣1?了哥王酒2?复方乌梅酒3?洗瘊酒4?骨碎补酒5?消疣酒6?蝉蜕地肤酒二十、酒渣鼻1?轻硫酊2?麻黄宣肺酒二十一、梅毒1?十味生地酒2?金蝉脱壳酒3?解毒消疮酒二十二、褥疮当归红花酊二十三、赤游风1?枳壳酒2?恶实根酒二十四、硬皮病1?红花桂枝酒2?芪归黄鳝酒3?附子羊肉酒4?参芪鹿蓉酒二十五、手脱皮老姜酒二十六、狐臭1?丁香白芷酊2?狐臭酒3?洗必泰酊4?藁本苦酒二十七、鸡眼1?补骨脂酊2?鸡眼酒膏二十八、皮肤皲裂当归荆芥酒二十九、脚气病1?丹参石斛酒2?乌药酒3?牛蒡断桑酒4?牛膝丹参酒5?生地牛蒡酒6?松节地黄酒第五节 眼科一、流泪症1?杞菊地冬酒2?杞菊麦冬酒3?菊花地骨酒二、急性结膜炎1?五参酒2?桑螵蛸酒3?蔓荆子酒三、眼睛干涩1?枸杞麻仁酒2?枸杞地术酒四、病毒性角膜炎加味修肝酒五、白内障1?四味平补酒2?驻景酒3?神效退翳酒4?草决明目酒六、视力减退1?枸杞生地酒2?健阳酒3?菖蒲白术酒4?黄精枸杞酒第十六节 耳鼻喉科及口腔科一、脓耳1?马钱冰片酒2?黄连冰片酒二、耳鸣1?木香怡神酒2?穿破菖蒲酒3?桑椹柠檬酒4?磁石熟地酒5?聪耳磁石酒三、耳聋1?天花粉酒2?百岁长寿酒3?苍耳愈聋酒4?磁石山萸酒四、鼻出血1?莱菔酒2?黑栀子酒五、鼻炎1?芫花根酊2?辛夷白芷酒3?滴鼻液六、鼻窦炎1?苍耳子酒2?蜂蛹酒七、扁桃体炎1?蛇胆酒2?橄榄青黛酒八、慢性咽炎1?人乳酒2?朱砂桂枝酒九、声音嘶哑1?西洋参酒2?芥子酒3?槐白皮酒4?蜜膏酒十、咽喉异物梗阻1?艾叶酒2?威灵仙酒十一、牙痛1?川乌蜂房酒2?乌头独活酒3?止痛酒4?四味茶叶酒5?白矾藜芦酒6?松叶辛芎酒7?松节细辛酒8?细辛柳皮酒9?郁李根酒10?齿痛酒11?枳壳根酒十二、牙齿松动1?三皮酒2?乌头郁李酒十三、拔牙麻醉1?乌头羊金酒2?细辛菝葜酒3?复方白茄根酒十四、口舌生疮1?半夏酒2?连柏栀子酒第十七节 肿瘤科一、鼻咽癌天葵子酒二、肺癌1?石蝉草酒2?一枝香酒三、乳腺癌1?三橘酒2?角莲闹羊酒3?南瓜蒂酒4?胡桃枝酒5?浙贝胡桃酒6?荷叶蒂酒7?鹿茸草酒8?槐花酒9?鲜柚酒10?蟹壳酒四、膀胱癌淫羊藿酒五、子宫颈癌1?秤砣梨酒2?黄药子酒3?鳖甲蟾蜍酒六、子宫内膜癌海马蜈蚣酒七、卵巢癌水蛭酒八、阴茎癌蟾蜍酒九、甲状腺癌消瘿抗癌酒十、恶性淋巴瘤八角莲酒十一、白血病1?紫杉酒2?鳗鲡鱼酒十二、癌症疼痛1?止痛擦剂2?水红花子酒3?黄药毒虫酒4?麝香冰片酒5?麝香夜牛酒第十八节 其他科一、汗证1?黄芪五味酒2?黄芪党参酒二、中暑1?芝麻酒2?杨梅浸酒3?苹果酒三、食物中毒1?芦苇根酒2?苦参甘草酒3?盐酒 第三章 秘传家用解酒便方 1?丁香砂仁散2?二葛二花丹3?山楂砂糖汁4?干良双姜散5?乌梅砂糖汁6?五鲜汁7?火腿椒姜汤8?四鲜赤豆汤9?甘草茶10?生姜乌梅茶11?生姜食醋茶12?白砂糖汤13?白果解酒丹14?白蔻丁香散15?石膏葛根汤16?龙眼大枣汤17?冰糖银耳汤18?红枣绿豆汤19?老菱角汤20?西瓜牛奶汁21?西瓜番茄汁22?西瓜翠衣汤23?杏仁砂糖茶24?杨梅砂糖汁25?良姜茴麻汤26?芜菁根散27?芹菜砂糖汁28?陈皮砂糖茶29?咖啡茶30?枇杷竹叶茶31?茅桑二根汤32?厚朴麦芽汤33?扁豆汁34?柑橘柠檬茶35?柠檬砂糖汁36?柿叶茶37?活命醒酒丹38?济生百杯丸39?砂仁葛根散40?草豆蔻汤41?草莓砂糖汁42?香薷扁豆散43?桑菊枸杞茶44?盐糖菠萝汁45?莲藕银耳汤46?鸭梨荸藕汁47?绿芷麝冰散48?绿豆甘草汤49?绿豆汤50?绿豆花汤51?菊花绿茶煎52?菠萝汤53?萝卜砂糖汁54?萝卜乳蛋汁55?银花砂糖茶56?番茄牛奶汁57?番茄汁58?紫苏生姜茶59?紫金锭60?紫葡萄汁61?葛花白药散62?葛花汤63?葛花砂仁丸64?葛花茶65?葡萄乳檬汁66?槟榔茶67?酸梅汤68?鲜藕汁69?鲜橘汁70?樟叶葛花散71?樱桃砂糖汁72?橄榄草盐汤73?橘莲梅枣汤74?薄荷绿豆汤75?螺蚌葱豉汤 第四章 药酒知识 第一节 药酒的起源与发展第二节 药酒的作用与特点一、作用(一)营养机体(二)促进消化(三)改善循环(四)畅达情志(五)延年益寿二、特点(一)配制简单(二)加减灵活(三)应用广泛(四)滋味可口(五)吸收迅速(六)药效较强(七)服用便捷(八)便于储存第三节 制作药酒的准备一、药酒配方二、入酒药物三、基质酒类四、制酒容器五、制酒时令第四节 制作药酒的方法一、煎煮法二、浸渍法(一)冷浸法(二)热浸法三、酿制法四、渗漉法第五节 药酒的服用方法一、选准药酒种类二、遵守服用原则(一)适量(二)适时(三)适温(四)内外有别三、避免服用禁忌(一)药物禁忌(二)病症禁忌(三)生理禁忌(四)年龄禁忌(五)饮食禁忌(六)起居禁忌四、注意服用反应第六节 药酒的储存与保管"}
{"id": 5, "generator": "claude-3-sonnet-20240229", "position": "Level 1 Node 0", "flag": "askWithSourceText", "question": {"question": "根据给定的摘要信息,根据下列时间线,这些药酒配方是按什么顺序呈现的:第一章涉及保健药酒,第二章涉及治疗疾病的药酒?", "questionCategory": "causal reasoning", "comprehension": "semantic"}, "answer": "根据提供的摘要,这些药酒配方的排列顺序似乎是按照人体系统和疾病种类分类的,而非先保健后治疗的顺序。摘要首先介绍了妇科、男科、儿科等系统的药酒配方,之后是骨伤科、皮肤科等其他系统的配方。每一节首先列出了该系统常见病症,然后依次给出了相应的药酒配方。整个摘要的呈现顺序是按照疾病所属系统的逻辑,并未先将保健类配方单独列出,而是直接按系统逐一介绍了临床治疗用药酒。因此没有将保健和治疗分开的时间顺序,而是将不同系统的疾病治疗配方组织在一起。此外,最后还单独列出了一些常用的解酒方,没有与前面按系统介绍的部分区分开。", "length": 15155, "text": "秘传保健药酒配制1200方\n《秘传保健药酒配制1200方》是化学工业出版社出版的图书,作者是刘步平 (编者), 方春平 (编者)。内容简介 《秘传保健药酒配制1200方》精心选取了疗效确切的药酒配方1200多首,详细介绍了具有养颜嫩肤、祛斑增白、降脂减肥、养脑益智、强筋壮骨、延年益寿等功效的保健药酒配方,以及临床心血管科、消化科、妇科、男科、骨伤科等各科常见病的药酒验方,每首配方都介绍了原料、制作、功效、主治、注意等内容。最后还介绍了药酒制作和使用时的注意事项。药酒在我国的使用历史已超过几千年,是人们防病治病、养生保健、延年益寿的佳品。《秘传保健药酒配制1200方》可为养生保健爱好者选用药酒提供指导,也可为医疗、科研、生产单位等研究开发药酒提供参考。 目录 第一章 秘传养生药酒 第一节 养颜嫩肤酒1?人参肉桂酒2?人参酒3?三圣参术酒4?天真酒5?四花逡巡酒6?四补苁蓉酒7?甘菊还童酒8?龙眼枸杞酒9?当归龙眼酒10?杞参麦杏酒11?参归美容酒12?参术枣姜酒13?参芪三白酒14?苓菊养荣酒15?桃仁朱砂酒16?猪脂玉液酒17?猪膏姜汁酒18?黄精苍术酒19?滋阴补血酒20?葡萄干酿酒21?橘皮酒第二节 祛斑增白酒1?牛羊双胆酒2?龙桂三仙酒3?龙眼当归酒4?地黄驻颜酒5?杏仁酒6?鸡子美容酒7?制白附子酒8?地骨商陆酒9?党参枸杞酒10?桃花白芷酒11?雄鸡酒12?槟榔陈皮露13?槟榔桃花露第三节 乌须黑发酒1?一醉散酒2?七宝美髯酒3?乌发益寿酒4?乌须酒(一)5?乌须酒(二)6?五精酒7?生地黄酿酒8?地黄牛膝酒9?芝麻酒10?芪归乌须酒11?补血顺气酒12?龟台回童酒13?固本地黄酒14?枸杞芝地酒15?美髯酒16?耐老酒17?首乌三豆酒18?首乌归地酒19?首乌茯苓酒20?桑椹酢浆酒21?常春枸杞酒22?康壮酒23?熟地杞檀酒24?熟地栀子酒第四节 生发护发酒1?三味侧柏酒2?双花二乌酊3?生姜牛黄酊4?羊椒碎补酊5?花椒酒6?诃子山柰酒7?侧柏三黄酒8?侧柏酒9?养血生发酒10?复方藜芦酊11?神应养真酒12?首乌生地酒13?首乌固发酒14?骨碎斑蝥酒15?脱发再生酊16?野菊香芷酒17?银花酒18?斑蝥侧柏酒19?斑蝥酒20?碎补首乌酒21?蔓荆附子酒22?熟地杞沉酒第五节 降脂减肥酒1?大蒜酒2?山楂丹参酒3?山楂麦冬酒4?玉竹长寿酒5?枸杞银花酒6?茱萸杜仲酒7?首乌黄精酒8?香菇山楂酒9?香菇柠檬酒10?党参山楂酒11?绿茶蜂蜜酒第六节 养脑益智酒1?人参益智酒2?五加远榆酒3?五味子酒4?归脾养心酒5?石燕酒6?龙眼酒7?羊肾仙茅酒8?远志菖蒲酒9?麦杞补心酒10?参杞精神酒11?首乌五味酒12?读书丸酒13?菖蒲骨脂酒14?黄精苁蓉酒第七节 强筋壮骨酒1?三味杜仲酒2?天雄茵芋酒3?左归酒4?龙羊健步酒5?地冬首乌酒6?当归天冬酒7?苁蓉金刚酒8?附子杜仲酒9?狗脊丹参酒10?虎骨萆薢酒11?虎鹿杞龙酒12?蒜豉酒第八节 强身健体酒1?人参枸杞酒2?人参黄芪酒3?人参葡萄酒4?三味抗衰酒5?乌鸡参归酒6?乌蛇黄芪酒7?五加地骨酒8?双乌暖胃酒9?双参益气酒10?双蜂强身酒11?归芪术芍酒12?归虎壮血酒13?白鸽血竭酒14?龙参玉灵酒15?地黄酒16?竹根七酒17?羊肉木香酒18?虫草壮元酒19?扶衰仙凤酒20?杞芪王益酒21?龟胶金樱酒22?参归养荣酒23?河车麦冬酒24?轻身酒25?钟乳石斛酒26?钟乳苁蓉酒27?首乌枸杞酒28?桃金娘酒29?桑椹杞龙酒30?益气补虚酒31?莲子猪肠酒32?鹿茸人参酒33?鹿茸虫草酒34?黄芪红花酒35?黄柏知母酒第九节 延年益寿酒1?一醉不老酒2?人参当归酒3?人参百岁酒4?人参固本酒5?山萸还少酒6?中藏延寿酒7?五子益精酒8?五子螵蛸酒9?五加皮酒10?长生固本酒11?四季春补酒12?玉竹高龄酒13?地黄滋补酒14?延年益寿酒15?杞龙延龄酒16?参苓固本酒17?松子菊花酒18?松龄太平酒19?复方虫草酒20?春寿酒21?枸杞鹤龄酒22?桑椹苍术酒23?益阴延年酒24?菖郁万寿酒25?黄精枸杞酒 第二章 秘传治病药酒 第一节 呼吸科一、感冒1?人参姜蜜酒2?肉桂酒3?防风苍耳酒4?姜蒜柠檬酒5?茶叶姜汁酒6?荆芥葱豉酒7?荔枝煮酒8?桑菊酒9?淡豆豉酒10?葡萄鸡蛋酒11?葱豉酒二、咳嗽1?山药酒2?百部重楼酒3?阿胶蛋黄酒4?陈皮酒5?龟肉酒6?油酥蜜酒7?郁李仁酒8?复方樟脑酊9?柚子酒10?桑叶酒11?猪肝大枣酒12?紫苏陈皮酒13?葶苈酒14?蜇硝荸荠酒15?蜂蜜鸡蛋酒三、哮喘1?人参蛤蚧酒2?千日红花酒3?大枣桃杏酒4?牛膝五味酒5?四味花椒酒6?竹黄酒7?芝麻胡桃酒8?苍耳咳喘酒9?苏子陈皮酒10?苏芥三子酒11?柑树叶酒12?胡桃酒13?峨参酒14?桑白皮酒15?桑皮姜萸酒16?消咳喘酒17?猪胰酒18?猪脬大枣酒19?紫苏大枣酒20?紫苏陈皮酒21?紫菀香豉酒22?葡萄冰糖酒23?葶苈防己酒24?蛤蚧参芪酒25?鹌鹑酒26?橘红酒四、肺脓肿1?金荞麦酒2?苇茎腥银酒3?薏苡芡实酒4?银翘三仁酒第二节 消化科一、消化不良1?三香神仙酒2?山楂龙眼酒3?苍白二术酒4?陈皮山楂酒5?神曲酒6?草果山楂酒7?草果陈皮酒8?健脾益气酒二、腹胀腹痛1?丁香山楂酒2?丁香厚朴酒3?三蔻姜桂酒4?五味九香酒5?肉丁救急酒6?虎杖桃仁酒7?砂仁橘红酒8?胡桃刺梨酒三、呃逆1?丁香柿蒂酒2?干姜附子酒3?姜汁葡萄酒4?熟地枸杞酒四、呕吐1?良姜藿香酒2?复方半夏酒3?茴香姜汁酒4?萸根麻陈酒5?薄荷酊五、噎嗝1?启膈酒2?除噎酒3?荸荠降逆酒六、便秘1?三黄朴草酒2?大黄附子酒3?双耳冰糖酒4?生地羊脂酒5?韭菜汁酒七、泄泻1?大蒜红糖酒2?双白花粉酒3?地瓜藤酒4?附子酒5?苓术酒6?姜附温脾酒7?猪胰大枣酒八、便血1?地榆茅根酒2?刺五加酒3?萱草根酒九、慢性胃炎1?人参半夏酒2?山楂槟榔酒3?术苓银花酒4?地榆青木酒5?佛手露酒十、肠梗阻1?大黄楝皮酒2?木瓜牛膝酒3?沉香猪脂酒4?麸荚葱姜酒十一、阑尾炎1?托毒排脓酒2?皂角乳香酒3?金银花酒第三节 心血管科一、高血压1?不老菊花酒2?地龙酒3?杜仲通草酒4?杜仲酒5?补益龙眼酒6?松鹤补酒7?桑椹酒8?菊花生地酒9?菖蒲木瓜酒10?嫩竹酒二、脑动脉硬化1?天麻健脑酒2?延年益寿酒3?松叶酒三、冠心病1?大蒜葡萄酒2?山楂瓜蒌酒3?丹参薤白酒4?双参山楂酒5?虫草薤白酒6?瓜葛红花酒四、心动过缓鹿茸酒五、脑卒中及其后遗症1?补血壮骨酒2?敦煌佛赐酒3?八仙庆寿酒4?石南防风酒5?鸡屎黑豆酒6?牛蒡枳壳酒7?白花全蝎酒8?白蛇独活酒9?独活牛膝酒10?黑豆桂枝酒11?蚕沙芪归酒12?川芎羌活酒13?当归细辛酒14?二活川芎酒15?黑豆丹参酒16?蔓菊白术酒17?三才五味酒18?威灵苍术酒19?息风活络酒20?皂荚南星酒第四节 血液科一、贫血1?山药葡萄酒2?龙眼大枣酒3?李子蜂蜜酒4?桑椹蜂蜜酒二、白细胞减少症生白扶正酒第五节 泌尿科一、泌尿系感染1?车前草酒2?地榆木通酒3?茄叶酒4?南藤酒5?眼子菜酒6?慈竹叶酒7?腹水草酒二、泌尿系结石1?石韦木通酒2?芒硝滑石酒3?金钱草酒4?胡桃内金酒三、水肿1?二桑酒2?芫花菟丝酒3?桃皮木通酒4?海藻茯苓酒5?通草灯心酒6?葫芦酒7?黑豆火麻酒四、遗尿1?仙茅益智酒2?鸡肝肉桂酒3?茱萸益智酒4?茴香桑螵酒五、尿潴留1?牛膝酒2?商陆酒3?菟苁通胞酒4?酢浆车前酒第六节 神经精神科一、头痛1?川芎白芷酒2?白芷薄荷酒3?全蝎神圣酒4?当归白芷酒5?两皮全蝎酒6?细辛蔓荆酒7?猪脑生姜酒8?黄连酒9?蔓荆川芎酒二、眩晕1?人参五味酒2?三仙酒3?女贞子酒4?山萸苁蓉酒5?复方女贞酒6?枸杞龙眼酒7?枸杞苍膝酒8?首乌芝麻酒9?桂豉酒10?菊花首乌酒11?鹿茸羊肾酒三、失眠1?合欢皮酒2?百益长春酒3?杞枣香橼酒4?补骨脂酒5?鸡睾龙眼酒6?枸杞百合酒7?茯苓酒8?莲子酒9?梅合双花酒10?黄精壮身酒11?熟地枸杞酒四、神经衰弱1?二参黄精酒2?人参天麻酒3?人参果酒4?巴戟羊藿酒五、面瘫1?全蝎地龙酒2?松叶防风酒3?春风三藤酒4?牵正酒5?独活牵正酒6?桂枝防风酒7?蚕沙川芎酒六、癔病1?缬草五味酒2?缬草全蝎酒七、神经官能症1?古汉养生酒2?莎草酒八、坐骨神经痛1?风湿酒2?归芪双乌酒3?狗骨酒第七节 内分泌科一、糖尿病1?凤眼草酒2?石斛麦地酒3?芪地二参酒4?枸精麦地酒5?蚕蛹煮酒6?菟丝酒二、类风湿性关节炎1?三乌追健酒2?乌头木瓜酊3?五蛇酒4?长宁风湿酒5?风湿酒6?全蝎蜈蚣酒7?抗风湿I号酒8?抗风湿II号酒9?复方三蛇酒10?复方雷公藤酒11?追风酒12?蜈蚣白蛇酒13?蕲蛇红花酒第八节 传染科一、水痘荸荠酒二、麻疹1?芫荽麻黄酒2?芫荽浮萍酒三、风疹牛蒡蝉蜕酒四、百日咳1?土牛兰草酒2?猪肠葱实酒五、流行性感冒1?芷羌搐鼻酒2?苦参板蓝酒3?桑菊酒六、肺结核1?洋参百部酒2?夏枯草酒3?桑皮仙鹤酒七、细菌性痢疾1?大黄酒2?山楂红糖酒3?双炭内金酒4?生姜白芍酒5?艾叶陈皮酒6?地榆附子酒7?活血导滞酒8?路路通酒第九节 外科一、疖1?龙葵草酒2?防风首乌酒3?刺针草酒4?野菊花叶酒5?酸甜石榴酒6?蝮蛇地丁酒二、甲沟炎大黄栀子酒三、足底疔藤黄酒四、痈1?止痛灵2?牛蒡地黄酒3?甘草麝香酒4?立效酒5?如意酒6?阳春酒7?两皮酒8?远志酒9?金银花藤酒10?复方藤黄酒11?柳树皮酒12?神效酒13?瓜蒌甘草酒五、瘰疬1?刀豆鸭蛋酒2?内消酒3?玄参磁石酒4?白头翁酒5?老蛇盘酒6?海藻乌蛇酒7?蜘蛛浸酒8?瘰疬酒9?鳖甲酒六、瘿1?复方黄药子酒2?急性子酒3?柳根酒4?海藻昆布酒5?消瘿酒6?紫菜黄药酒七、乳腺炎1?大九股牛酒2?川楝子酒3?元宝草酒4?丝瓜络酒5?白果酒6?红砂糖酒7?牡荆子酒8?玫瑰煮酒9?苦地胆根酒10?菊花公英酒11?蛇蜕酒12?银花大黄酒13?银花公英酒14?紫花地丁酒15?蒲公英内服酒八、乳腺增生1?虎刺根酒2?鳝鱼皮酒九、痔疮1?二甲酒2?大茄子酒3?大黄地榆酒4?血三七酒5?花蝴蝶升麻酒6?苦参公英酒7?槐枝苍耳酒8?槐枝槐皮酒十、血栓闭塞性脉管炎1?阳和解凝酒2?爬山猴酒3?祛寒通络酒I4?祛寒通络酒II5?通利血脉酒6?温经通络酒第十节 妇科一、月经先期量多1?十全大补酒2?地榆酒3?铁树叶酒4?猪皮红糖酒5?黑豆淡菜酒二、月经后期量少1?月季红花酒2?木耳胡桃酒3?红花酒4?红茶葡萄酒5?佛手砂仁酒6?茴香桂枝酒7?桑椹黄精酒8?鹿角霜酒三、月经先后无定期1?八珍酒2?小茅香酒3?月季蒲黄酒4?当归加皮酒5?当归红花酒6?当归吴萸酒7?血藤归参酒8?花蝴蝶酒9?补气调经酒10?鸡血藤酒11?枸杞杜仲酒12?香附红花酒13?蓼根当归酒14?薯莨酒四、经期延长1?大黄酒2?丹参延胡酒五、经间期出血1?鸡血小麦酒2?茴香青皮酒3?棉花籽酒六、闭经1?大黄三七酒2?川芎鸡蛋酒3?马鞭草酒4?月季当归酒5?牛膝麻仁酒6?当归干漆酒7?牡丹月季酒8?参茸补血酒9?凌霄花酒10?桑椹红花酒11?益母黑豆酒12?益母当归酒13?紫河车酒14?蒲黄双豆酒七、痛经1?人参白芍酒2?三草双花酒3?山楂玫瑰酒4?丹参红花酒5?凤仙黑豆酒6?归芎郁金酒7?归附温经酒8?艾芎鸡蛋酒9?当归延胡酒10?当归黄芪酒11?红花苏木酒12?血竭艾芎酒13?茜草根酒14?荔枝苏木酒15?香附佩兰酒16?益母丹参酒17?鸭蛋姜片酒18?菖蒲活麻酒19?滋阴止痛酒20?黑豆鸡蛋酒八、经行乳房胀痛留行山甲酒九、更年期综合征黄精枸杞酒十、习惯性流产1?赤豆芽酒2?急性子酒十一、堕胎小产1?生地蒲黄酒2?蒲黄槐角酒十二、难产1?加味龟甲酒2?蛋黄酒3?蟹爪酒十三、产后血晕1?红花酒2?参附酒3?逐血调中酒十四、产后腹痛1?补中当归酒2?归红箭羽酒3?刘寄奴酒4?当归芍酒5?羌活酒6?芹菜籽酒7?鱼腥草酒8?益母草酒十五、产后痉症1?归芪酒2?白术黑豆酒3?当归芥穗酒4?鸡粪酒5?寄生黑豆酒十六、产后身痛1?双活人参酒2?僵蚕豆淋酒3?石斛附子酒4?独活肉桂酒5?黄芪防风酒6?黑豆大枣酒十七、产后便秘1?双仁酒2?加味四物酒十八、产后缺乳1?大枣糯米甜酒2?奶浆参酒3?米酒煮虾米4?红糖花生酒5?鱼灰酒6?瓜蒌酒7?涌泉酒8?通草钟乳酒9?猪蹄通草酒十九、产后胁痛1?芎归泻肝酒2?柴胡白术酒二十、产后虚弱1?五加皮酒2?当归续断酒3?杜仲肉桂酒4?灵芝龙眼酒5?金银花藤酒6?糯米米酒二十一、不孕1?二根茴香酒2?巴戟归芪酒3?延寿获嗣酒4?宜男酒5?养精种玉酒6?种玉酒7?草苁蓉酒8?排卵酒9?淫羊益母酒二十二、子宫脱垂1?八月札酒2?小金樱酒3?月季花红酒4?归芪升麻酒二十三、盆腔炎1?大蓟黄柏酒2?干姜白芍酒3?夏枯山甲酒4?淡菜韭菜酒5?槐米牡蛎酒二十四、子宫肌瘤1?山楂血藤酒2?当归蒲延酒二十五、子宫内膜异位症1?山楂红花酒2?当归肉桂酒3?乳香没药酒4?莪术失笑酒二十六、外阴瘙痒1?四子酒2?南木香酒第十一节 男科一、性早熟1?知柏生地酒2?柴丹栀子酒二、性欲减退1?双鞭壮阳酒2?羊藿木瓜酒3?明虾酒4?枸杞酒5?海狗肾酒三、遗精1?巴戟二子酒2?地黄枸杞酒3?补肾填精酒4?金樱子酒5?益肾固精酒6?滋阴止遗酒四、早泄1?三鞭双地酒2?巴戟熟地酒3?锁阳苁蓉酒五、阳痿1?人参鹿茸酒2?三石酒3?五子螵蛸酒4?巴戟牛膝酒5?仙茅羊藿酒6?羊肉木香酒7?羊藿金樱酒8?补肾壮阳酒9?补肾延寿酒10?刺猬皮酒11?板栗猪肾酒12?狗肾枸杞酒13?钟乳附子酒14?韭菜益智酒15?海马参茸酒16?雪莲虫草酒17?麻雀菟丝酒18?胡芦巴酒19?熟地枸杞酒20?醉虾酒21?震痿酒六、不育1?九子生精酒2?山萸菟丝酒3?生精酒4?多子酒5?补肾生精酒6?还春酒7?鸡睾酒8?青松龄酒9?种子酒10?胡桃四花酒11?续嗣降生酒12?鹿龄集酒13?毓麟酒七、前列腺炎1?二山芡实酒2?小茴香酒3?荠菜酒4?萆薢酒八、前列腺增生1?胡桃五味酒2?黄芪白芍酒九、阴囊湿疹1?五子黄柏酒2?苦参豨莶酒3?茼蒿酒十、疝气1?吴萸茴香酒2?花椒延胡酒3?闹羊紫荆酒4?茴香酒5?海藻酒6?橘荔双核酒第十二节 儿科一、小儿发育不良鹿茸山药酒二、小儿发热1?三味葱白酒2?羊脂大枣酒3?栀子桃仁酒三、小儿感冒1?吴萸白矾酒2?香薷苏叶酒3?葱实姜盐酒四、小儿暑疖1?公英外敷酒2?苦参大黄酒五、小儿遗尿1?鸡肠酒2?雄鸽当归酒六、小儿厌食栀子丁香酒七、小儿虫证1?百部酊2?青梅酒八、小儿泄泻1?红砂糖酒2?花椒肉桂酒3?香附酒九、小儿呕吐1?干生二姜酒2?生姜食醋酒十、小儿惊风1?牛黄钟乳酒2?清肝息风酒十一、小儿疳证白鱼竹茹酒十二、小儿癫痫1?防己莽草酒2?紫石铁精酒十三、小儿肺炎大黄芩连酒十四、小儿口腔溃疡三黄酒十五、新生儿硬肿症艾叶韭菜酒第十三节 骨伤科一、跌打损伤1?二花白矾酒2?三七跌打酒3?三皮郁金酒4?土鳖虫酒5?山姜茜草酒6?内伤白酒7?凤仙归尾酒8?少林八仙酒9?见血飞酒10?风伤擦剂11?生地桃仁酒12?刘寄奴酒13?当归芷竭酒14?红花苏木酒15?没药鸡子酒16?岩陀香藤酒17?玫瑰红花酒18?金雀花酒19?复方红花酒20?桃红活血酒21?散血破瘀酒22?紫金酒二、闪扭伤1?土鳖红花酒2?大黄红花酒3?闪挫止痛酒4?伤痛灵擦剂5?参胡杜仲酒6?按摩酒7?桂枝当归酒8?三棱跌打酒三、腰肌劳损1?益肾补骨酒2?扶芳藤酒四、骨折1?二乌透骨酒2?茴香樟脑酒3?桂红当归酒4?接骨续筋酒五、脱位1?壮筋补血酒2?整骨麻酒六、颈椎病1?龟甲蛤蚧酒2?茄皮鹿角酒七、肩周炎1?五虫酒2?消炎止痛酒3?漏肩风酒八、骨质增生1?二乌骨刺酒2?抗骨刺酒3?苁蓉骨刺酒4?复方当归酒5?威灵羊藿酒6?骨质增生酒7?强骨灵酒九、腰椎间盘突出症紫荆活血酒十、网球肘药棒酒十一、膝关节滑膜炎外敷白芷酒十二、关节疼痛1?当归松叶酒2?羊胫骨酒3?肉桂黄芪酒4?防风白术酒5?防风松叶酒6?防风茜草酒7?防风秦艽酒8?伸筋草酒9?抗风湿酒10?附子白术酒11?附子细辛酒12?参茸追风酒13?国公酒14?夜合枝酒15?茄根酒16?虎骨川芎酒17?虎骨白芍酒18?虎骨追风酒19?复方穿山龙酒20?活血舒筋酒21?独活南藤酒22?祛风调荣酒23?祛风酒24?络石仙茅酒25?胡蜂酒26?茵芋萆薢酒27?草乌威灵酒28?首乌地冬酒29?桑枝加皮酒30?海风藤酒31?海桐皮牛膝酒32?秦艽酒33?酒外擦方34?寄生骨痛酒35?排风酒36?麻黄骨痛酒十三、腰腿疼痛1?三黄参归酒2?三痹酒3?千年健酒4?千金杜仲酒5?川乌杜仲酒6?乌藤酒7?五加皮酒8?五积散酒9?巴戟牛膝酒10?牛蒡茵芋酒11?牛膝石斛酒12?牛膝参芪酒13?牛膝虎骨酒14?牛膝独活酒15?车前葱枣酒16?长松酒17?风湿骨痛酒18?加味地黄酒19?加味养生酒20?生地羌活酒21?白石英酒22?白花蛇酒23?延年石斛酒24?伸筋乌头酒25?杜仲加皮酒26?补肾酒27?参桂养荣酒28?狗脊马鞭酒29?狗脊黑��酒30?肾着酒31?虎骨当归酒32?鱼鳔鹿角酒33?威灵仙酒34?独活当归酒35?独活参附酒36?珍珠腰痛酒37?胡桃全蝎酒38?茵芋薏苡酒39?草乌薏苡酒40?追风酒41?钟乳石酒42?首乌薏苡酒43?骨痛酒44?桐皮薏苡酒45?寄生地归酒46?甜瓜子酒47?萆薢除湿酒48?萆薢附子酒49?鹿角杜仲酒50?鹿角腰痛酒十四、骨质疏松症1?人参枸杞酒2?当归枸杞酒十五、外伤出血1?白背三七酒2?红旱莲酒十六、破伤风1?山甲酒2?天麻四虫酒3?威灵独蒜酒4?雀屎酒5?蜜蜡酒十七、外伤性截瘫1?山虎洋参酒2?截瘫药酒十八、冻伤1?丁香酒2?二乌茴香酒3?二椒樟脑酊4?当归留行酊5?红花干姜酒6?防冻酊十九、疯狗咬伤1?七星剑酒2?华山矾酒3?板蓝根酒4?草兰根酒5?荔枝草酒二十、水火烫伤1?大黄槐角酒2?鸡蛋清外涂酒3?复方五加皮酒4?复方芩茶酒5?烧伤酒6?烧伤酒方17?烧伤酒方28?莲榆酒二十一、毒蛇咬伤1?九龙吐珠酒2?复方扁豆酒3?热酒4?救必应酒5?蛇伤酒第四节 皮肤科一、稻田性皮炎1?九里香酒2?五倍白矾酒3?樟脑冰片酊二、神经性皮炎1?土苯酚2?外擦酒3?红花冰片酒4?细辛姜桂酒5?苦参长卿酒6?复方斑蝥酒7?神经性皮炎酒三、脂溢性皮炎1?白鲜生地酒2?皮炎液3?苦参凤眼酒四、虫咬皮炎1?丁香薄荷酊2?重楼酒五、毛囊炎藤黄苦参酒六、湿疹1?土槿皮酒2?止痒酒I3?蛇床苦参酒4?黄柏地肤酒七、荨麻疹1?白茄根酒2?石南肤子酒3?红花乌梅酒4?松叶酒5?枳壳秦艽酒6?浮萍酒7?蜂房苦参酒8?蝉蜕糯米甜酒八、白癜风1?乌蛇酒2?无花果酒3?白癜风酒4?补骨前胡酊5?补骨密陀酊6?菟丝子酊九、牛皮癣1?马钱二黄酒2?五蛇酒3?牛皮癣酒4?四虎二黄酒5?复方洋金酒6?喜树酚7?斑蝥青皮酒8?蜈蚣蛤蟆酒9?蝮蛇人参酒10?癣药酒十、痱子1?三黄参冰酊2?地龙茶叶酊十一、疥疮1?水菖蒲酒2?灭疥灵3?白鲜百部酒4?百部蛇床酊5?龟甲酒十二、鹅掌风1?一号癣药水2?生姜浸酒3?当归百部酒4?羊蹄草酒5?复方土槿酊十三、足癣硝银白矾酊十四、癣类杂病1?一号癣药水2?二号癣药水3?止痒酒4?去癣酒5?甘草升麻酒6?百部大风酒7?克癣液8?参白癣药水9?苦参鲜皮酒10?复方雪花酒11?复方蟾蜍酒12?鸦胆百部酒13?斑黄酒十五、痤疮1?大黄冰片酊2?冬瓜酒3?苦参百部酊4?重楼酒十六、带状疱疹1?三花止痒酊2?石膏酒3?矾冰酒4?金银花酒5?南星重楼酒6?银菊凤床酒7?雄黄酒十七、皮肤瘙痒1?百部草酊2?枳实酒3?活血止痒酒4?神蛇酒5?黄芪续断酒6?蝉蜕鲜皮酒十八、虱1?止痒酒II2?灭虱酒3?百部槟榔酒4?除虱酒十九、疣1?了哥王酒2?复方乌梅酒3?洗瘊酒4?骨碎补酒5?消疣酒6?蝉蜕地肤酒二十、酒渣鼻1?轻硫酊2?麻黄宣肺酒二十一、梅毒1?十味生地酒2?金蝉脱壳酒3?解毒消疮酒二十二、褥疮当归红花酊二十三、赤游风1?枳壳酒2?恶实根酒二十四、硬皮病1?红花桂枝酒2?芪归黄鳝酒3?附子羊肉酒4?参芪鹿蓉酒二十五、手脱皮老姜酒二十六、狐臭1?丁香白芷酊2?狐臭酒3?洗必泰酊4?藁本苦酒二十七、鸡眼1?补骨脂酊2?鸡眼酒膏二十八、皮肤皲裂当归荆芥酒二十九、脚气病1?丹参石斛酒2?乌药酒3?牛蒡断桑酒4?牛膝丹参酒5?生地牛蒡酒6?松节地黄酒第五节 眼科一、流泪症1?杞菊地冬酒2?杞菊麦冬酒3?菊花地骨酒二、急性结膜炎1?五参酒2?桑螵蛸酒3?蔓荆子酒三、眼睛干涩1?枸杞麻仁酒2?枸杞地术酒四、病毒性角膜炎加味修肝酒五、白内障1?四味平补酒2?驻景酒3?神效退翳酒4?草决明目酒六、视力减退1?枸杞生地酒2?健阳酒3?菖蒲白术酒4?黄精枸杞酒第十六节 耳鼻喉科及口腔科一、脓耳1?马钱冰片酒2?黄连冰片酒二、耳鸣1?木香怡神酒2?穿破菖蒲酒3?桑椹柠檬酒4?磁石熟地酒5?聪耳磁石酒三、耳聋1?天花粉酒2?百岁长寿酒3?苍耳愈聋酒4?磁石山萸酒四、鼻出血1?莱菔酒2?黑栀子酒五、鼻炎1?芫花根酊2?辛夷白芷酒3?滴鼻液六、鼻窦炎1?苍耳子酒2?蜂蛹酒七、扁桃体炎1?蛇胆酒2?橄榄青黛酒八、慢性咽炎1?人乳酒2?朱砂桂枝酒九、声音嘶哑1?西洋参酒2?芥子酒3?槐白皮酒4?蜜膏酒十、咽喉异物梗阻1?艾叶酒2?威灵仙酒十一、牙痛1?川乌蜂房酒2?乌头独活酒3?止痛酒4?四味茶叶酒5?白矾藜芦酒6?松叶辛芎酒7?松节细辛酒8?细辛柳皮酒9?郁李根酒10?齿痛酒11?枳壳根酒十二、牙齿松动1?三皮酒2?乌头郁李酒十三、拔牙麻醉1?乌头羊金酒2?细辛菝葜酒3?复方白茄根酒十四、口舌生疮1?半夏酒2?连柏栀子酒第十七节 肿瘤科一、鼻咽癌天葵子酒二、肺癌1?石蝉草酒2?一枝香酒三、乳腺癌1?三橘酒2?角莲闹羊酒3?南瓜蒂酒4?胡桃枝酒5?浙贝胡桃酒6?荷叶蒂酒7?鹿茸草酒8?槐花酒9?鲜柚酒10?蟹壳酒四、膀胱癌淫羊藿酒五、子宫颈癌1?秤砣梨酒2?黄药子酒3?鳖甲蟾蜍酒六、子宫内膜癌海马蜈蚣酒七、卵巢癌水蛭酒八、阴茎癌蟾蜍酒九、甲状腺癌消瘿抗癌酒十、恶性淋巴瘤八角莲酒十一、白血病1?紫杉酒2?鳗鲡鱼酒十二、癌症疼痛1?止痛擦剂2?水红花子酒3?黄药毒虫酒4?麝香冰片酒5?麝香夜牛酒第十八节 其他科一、汗证1?黄芪五味酒2?黄芪党参酒二、中暑1?芝麻酒2?杨梅浸酒3?苹果酒三、食物中毒1?芦苇根酒2?苦参甘草酒3?盐酒 第三章 秘传家用解酒便方 1?丁香砂仁散2?二葛二花丹3?山楂砂糖汁4?干良双姜散5?乌梅砂糖汁6?五鲜汁7?火腿椒姜汤8?四鲜赤豆汤9?甘草茶10?生姜乌梅茶11?生姜食醋茶12?白砂糖汤13?白果解酒丹14?白蔻丁香散15?石膏葛根汤16?龙眼大枣汤17?冰糖银耳汤18?红枣绿豆汤19?老菱角汤20?西瓜牛奶汁21?西瓜番茄汁22?西瓜翠衣汤23?杏仁砂糖茶24?杨梅砂糖汁25?良姜茴麻汤26?芜菁根散27?芹菜砂糖汁28?陈皮砂糖茶29?咖啡茶30?枇杷竹叶茶31?茅桑二根汤32?厚朴麦芽汤33?扁豆汁34?柑橘柠檬茶35?柠檬砂糖汁36?柿叶茶37?活命醒酒丹38?济生百杯丸39?砂仁葛根散40?草豆蔻汤41?草莓砂糖汁42?香薷扁豆散43?桑菊枸杞茶44?盐糖菠萝汁45?莲藕银耳汤46?鸭梨荸藕汁47?绿芷麝冰散48?绿豆甘草汤49?绿豆汤50?绿豆花汤51?菊花绿茶煎52?菠萝汤53?萝卜砂糖汁54?萝卜乳蛋汁55?银花砂糖茶56?番茄牛奶汁57?番茄汁58?紫苏生姜茶59?紫金锭60?紫葡萄汁61?葛花白药散62?葛花汤63?葛花砂仁丸64?葛花茶65?葡萄乳檬汁66?槟榔茶67?酸梅汤68?鲜藕汁69?鲜橘汁70?樟叶葛花散71?樱桃砂糖汁72?橄榄草盐汤73?橘莲梅枣汤74?薄荷绿豆汤75?螺蚌葱豉汤 第四章 药酒知识 第一节 药酒的起源与发展第二节 药酒的作用与特点一、作用(一)营养机体(二)促进消化(三)改善循环(四)畅达情志(五)延年益寿二、特点(一)配制简单(二)加减灵活(三)应用广泛(四)滋味可口(五)吸收迅速(六)药效较强(七)服用便捷(八)便于储存第三节 制作药酒的准备一、药酒配方二、入酒药物三、基质酒类四、制酒容器五、制酒时令第四节 制作药酒的方法一、煎煮法二、浸渍法(一)冷浸法(二)热浸法三、酿制法四、渗漉法第五节 药酒的服用方法一、选准药酒种类二、遵守服用原则(一)适量(二)适时(三)适温(四)内外有别三、避免服用禁忌(一)药物禁忌(二)病症禁忌(三)生理禁忌(四)年龄禁忌(五)饮食禁忌(六)起居禁忌四、注意服用反应第六节 药酒的储存与保管"}
{"id": 5, "question": "制作药酒最常用的方法有哪几种?", "text": "秘传保健药酒配制1200方\n《秘传保健药酒配制1200方》是化学工业出版社出版的图书，作者是刘步平 (编者), 方春平 (编者)。内容简介 《秘传保健药酒配制1200方》精心选取了疗效确切的药酒配方1200多首，详细介绍了具有养颜嫩肤、祛斑增白、降脂减肥、养脑益智、强筋壮骨、延年益寿等功效的保健药酒配方，以及临床心血管科、消化科、妇科、男科、骨伤科等各科常见病的药酒验方，每首配方都介绍了原料、制作、功效、主治、注意等内容。最后还介绍了药酒制作和使用时的注意事项。药酒在我国的使用历史已超过几千年，是人们防病治病、养生保健、延年益寿的佳品。《秘传保健药酒配制1200方》可为养生保健爱好者选用药酒提供指导，也可为医疗、科研、生产单位等研究开发药酒提供参考。 目录 第一章 秘传养生药酒 第一节 养颜嫩肤酒1？人参肉桂酒2？人参酒3？三圣参术酒4？天真酒5？四花逡巡酒6？四补苁蓉酒7？甘菊还童酒8？龙眼枸杞酒9？当归龙眼酒10？杞参麦杏酒11？参归美容酒12？参术枣姜酒13？参芪三白酒14？苓菊养荣酒15？桃仁朱砂酒16？猪脂玉液酒17？猪膏姜汁酒18？黄精苍术酒19？滋阴补血酒20？葡萄干酿酒21？橘皮酒第二节 祛斑增白酒1？牛羊双胆酒2？龙桂三仙酒3？龙眼当归酒4？地黄驻颜酒5？杏仁酒6？鸡子美容酒7？制白附子酒8？地骨商陆酒9？党参枸杞酒10？桃花白芷酒11？雄鸡酒12？槟榔陈皮露13？槟榔桃花露第三节 乌须黑发酒1？一醉散酒2？七宝美髯酒3？乌发益寿酒4？乌须酒（一）5？乌须酒（二）6？五精酒7？生地黄酿酒8？地黄牛膝酒9？芝麻酒10？芪归乌须酒11？补血顺气酒12？龟台回童酒13？固本地黄酒14？枸杞芝地酒15？美髯酒16？耐老酒17？首乌三豆酒18？首乌归地酒19？首乌茯苓酒20？桑椹酢浆酒21？常春枸杞酒22？康壮酒23？熟地杞檀酒24？熟地栀子酒第四节 生发护发酒1？三味侧柏酒2？双花二乌酊3？生姜牛黄酊4？羊椒碎补酊5？花椒酒6？诃子山柰酒7？侧柏三黄酒8？侧柏酒9？养血生发酒10？复方藜芦酊11？神应养真酒12？首乌生地酒13？首乌固发酒14？骨碎斑蝥酒15？脱发再生酊16？野菊香芷酒17？银花酒18？斑蝥侧柏酒19？斑蝥酒20？碎补首乌酒21？蔓荆附子酒22？熟地杞沉酒第五节 降脂减肥酒1？大蒜酒2？山楂丹参酒3？山楂麦冬酒4？玉竹长寿酒5？枸杞银花酒6？茱萸杜仲酒7？首乌黄精酒8？香菇山楂酒9？香菇柠檬酒10？党参山楂酒11？绿茶蜂蜜酒第六节 养脑益智酒1？人参益智酒2？五加远榆酒3？五味子酒4？归脾养心酒5？石燕酒6？龙眼酒7？羊肾仙茅酒8？远志菖蒲酒9？麦杞补心酒10？参杞精神酒11？首乌五味酒12？读书丸酒13？菖蒲骨脂酒14？黄精苁蓉酒第七节 强筋壮骨酒1？三味杜仲酒2？天雄茵芋酒3？左归酒4？龙羊健步酒5？地冬首乌酒6？当归天冬酒7？苁蓉金刚酒8？附子杜仲酒9？狗脊丹参酒10？虎骨萆薢酒11？虎鹿杞龙酒12？蒜豉酒第八节 强身健体酒1？人参枸杞酒2？人参黄芪酒3？人参葡萄酒4？三味抗衰酒5？乌鸡参归酒6？乌蛇黄芪酒7？五加地骨酒8？双乌暖胃酒9？双参益气酒10？双蜂强身酒11？归芪术芍酒12？归虎壮血酒13？白鸽血竭酒14？龙参玉灵酒15？地黄酒16？竹根七酒17？羊肉木香酒18？虫草壮元酒19？扶衰仙凤酒20？杞芪王益酒21？龟胶金樱酒22？参归养荣酒23？河车麦冬酒24？轻身酒25？钟乳石斛酒26？钟乳苁蓉酒27？首乌枸杞酒28？桃金娘酒29？桑椹杞龙酒30？益气补虚酒31？莲子猪肠酒32？鹿茸人参酒33？鹿茸虫草酒34？黄芪红花酒35？黄柏知母酒第九节 延年益寿酒1？一醉不老酒2？人参当归酒3？人参百岁酒4？人参固本酒5？山萸还少酒6？中藏延寿酒7？五子益精酒8？五子螵蛸酒9？五加皮酒10？长生固本酒11？四季春补酒12？玉竹高龄酒13？地黄滋补酒14？延年益寿酒15？杞龙延龄酒16？参苓固本酒17？松子菊花酒18？松龄太平酒19？复方虫草酒20？春寿酒21？枸杞鹤龄酒22？桑椹苍术酒23？益阴延年酒24？菖郁万寿酒25？黄精枸杞酒 第二章 秘传治病药酒 第一节 呼吸科一、感冒1？人参姜蜜酒2？肉桂酒3？防风苍耳酒4？姜蒜柠檬酒5？茶叶姜汁酒6？荆芥葱豉酒7？荔枝煮酒8？桑菊酒9？淡豆豉酒10？葡萄鸡蛋酒11？葱豉酒二、咳嗽1？山药酒2？百部重楼酒3？阿胶蛋黄酒4？陈皮酒5？龟肉酒6？油酥蜜酒7？郁李仁酒8？复方樟脑酊9？柚子酒10？桑叶酒11？猪肝大枣酒12？紫苏陈皮酒13？葶苈酒14？蜇硝荸荠酒15？蜂蜜鸡蛋酒三、哮喘1？人参蛤蚧酒2？千日红花酒3？大枣桃杏酒4？牛膝五味酒5？四味花椒酒6？竹黄酒7？芝麻胡桃酒8？苍耳咳喘酒9？苏子陈皮酒10？苏芥三子酒11？柑树叶酒12？胡桃酒13？峨参酒14？桑白皮酒15？桑皮姜萸酒16？消咳喘酒17？猪胰酒18？猪脬大枣酒19？紫苏大枣酒20？紫苏陈皮酒21？紫菀香豉酒22？葡萄冰糖酒23？葶苈防己酒24？蛤蚧参芪酒25？鹌鹑酒26？橘红酒四、肺脓肿1？金荞麦酒2？苇茎腥银酒3？薏苡芡实酒4？银翘三仁酒第二节 消化科一、消化不良1？三香神仙酒2？山楂龙眼酒3？苍白二术酒4？陈皮山楂酒5？神曲酒6？草果山楂酒7？草果陈皮酒8？健脾益气酒二、腹胀腹痛1？丁香山楂酒2？丁香厚朴酒3？三蔻姜桂酒4？五味九香酒5？肉丁救急酒6？虎杖桃仁酒7？砂仁橘红酒8？胡桃刺梨酒三、呃逆1？丁香柿蒂酒2？干姜附子酒3？姜汁葡萄酒4？熟地枸杞酒四、呕吐1？良姜藿香酒2？复方半夏酒3？茴香姜汁酒4？萸根麻陈酒5？薄荷酊五、噎嗝1？启膈酒2？除噎酒3？荸荠降逆酒六、便秘1？三黄朴草酒2？大黄附子酒3？双耳冰糖酒4？生地羊脂酒5？韭菜汁酒七、泄泻1？大蒜红糖酒2？双白花粉酒3？地瓜藤酒4？附子酒5？苓术酒6？姜附温脾酒7？猪胰大枣酒八、便血1？地榆茅根酒2？刺五加酒3？萱草根酒九、慢性胃炎1？人参半夏酒2？山楂槟榔酒3？术苓银花酒4？地榆青木酒5？佛手露酒十、肠梗阻1？大黄楝皮酒2？木瓜牛膝酒3？沉香猪脂酒4？麸荚葱姜酒十一、阑尾炎1？托毒排脓酒2？皂角乳香酒3？金银花酒第三节 心血管科一、高血压1？不老菊花酒2？地龙酒3？杜仲通草酒4？杜仲酒5？补益龙眼酒6？松鹤补酒7？桑椹酒8？菊花生地酒9？菖蒲木瓜酒10？嫩竹酒二、脑动脉硬化1？天麻健脑酒2？延年益寿酒3？松叶酒三、冠心病1？大蒜葡萄酒2？山楂瓜蒌酒3？丹参薤白酒4？双参山楂酒5？虫草薤白酒6？瓜葛红花酒四、心动过缓鹿茸酒五、脑卒中及其后遗症1？补血壮骨酒2？敦煌佛赐酒3？八仙庆寿酒4？石南防风酒5？鸡屎黑豆酒6？牛蒡枳壳酒7？白花全蝎酒8？白蛇独活酒9？独活牛膝酒10？黑豆桂枝酒11？蚕沙芪归酒12？川芎羌活酒13？当归细辛酒14？二活川芎酒15？黑豆丹参酒16？蔓菊白术酒17？三才五味酒18？威灵苍术酒19？息风活络酒20？皂荚南星酒第四节 血液科一、贫血1？山药葡萄酒2？龙眼大枣酒3？李子蜂蜜酒4？桑椹蜂蜜酒二、白细胞减少症生白扶正酒第五节 泌尿科一、泌尿系感染1？车前草酒2？地榆木通酒3？茄叶酒4？南藤酒5？眼子菜酒6？慈竹叶酒7？腹水草酒二、泌尿系结石1？石韦木通酒2？芒硝滑石酒3？金钱草酒4？胡桃内金酒三、水肿1？二桑酒2？芫花菟丝酒3？桃皮木通酒4？海藻茯苓酒5？通草灯心酒6？葫芦酒7？黑豆火麻酒四、遗尿1？仙茅益智酒2？鸡肝肉桂酒3？茱萸益智酒4？茴香桑螵酒五、尿潴留1？牛膝酒2？商陆酒3？菟苁通胞酒4？酢浆车前酒第六节 神经精神科一、头痛1？川芎白芷酒2？白芷薄荷酒3？全蝎神圣酒4？当归白芷酒5？两皮全蝎酒6？细辛蔓荆酒7？猪脑生姜酒8？黄连酒9？蔓荆川芎酒二、眩晕1？人参五味酒2？三仙酒3？女贞子酒4？山萸苁蓉酒5？复方女贞酒6？枸杞龙眼酒7？枸杞苍膝酒8？首乌芝麻酒9？桂豉酒10？菊花首乌酒11？鹿茸羊肾酒三、失眠1？合欢皮酒2？百益长春酒3？杞枣香橼酒4？补骨脂酒5？鸡睾龙眼酒6？枸杞百合酒7？茯苓酒8？莲子酒9？梅合双花酒10？黄精壮身酒11？熟地枸杞酒四、神经衰弱1？二参黄精酒2？人参天麻酒3？人参果酒4？巴戟羊藿酒五、面瘫1？全蝎地龙酒2？松叶防风酒3？春风三藤酒4？牵正酒5？独活牵正酒6？桂枝防风酒7？蚕沙川芎酒六、癔病1？缬草五味酒2？缬草全蝎酒七、神经官能症1？古汉养生酒2？莎草酒八、坐骨神经痛1？风湿酒2？归芪双乌酒3？狗骨酒第七节 内分泌科一、糖尿病1？凤眼草酒2？石斛麦地酒3？芪地二参酒4？枸精麦地酒5？蚕蛹煮酒6？菟丝酒二、类风湿性关节炎1？三乌追健酒2？乌头木瓜酊3？五蛇酒4？长宁风湿酒5？风湿酒6？全蝎蜈蚣酒7？抗风湿Ⅰ号酒8？抗风湿Ⅱ号酒9？复方三蛇酒10？复方雷公藤酒11？追风酒12？蜈蚣白蛇酒13？蕲蛇红花酒第八节 传染科一、水痘荸荠酒二、麻疹1？芫荽麻黄酒2？芫荽浮萍酒三、风疹牛蒡蝉蜕酒四、百日咳1？土牛兰草酒2？猪肠葱实酒五、流行性感冒1？芷羌搐鼻酒2？苦参板蓝酒3？桑菊酒六、肺结核1？洋参百部酒2？夏枯草酒3？桑皮仙鹤酒七、细菌性痢疾1？大黄酒2？山楂红糖酒3？双炭内金酒4？生姜白芍酒5？艾叶陈皮酒6？地榆附子酒7？活血导滞酒8？路路通酒第九节 外科一、疖1？龙葵草酒2？防风首乌酒3？刺针草酒4？野菊花叶酒5？酸甜石榴酒6？蝮蛇地丁酒二、甲沟炎大黄栀子酒三、足底疔藤黄酒四、痈1？止痛灵2？牛蒡地黄酒3？甘草麝香酒4？立效酒5？如意酒6？阳春酒7？两皮酒8？远志酒9？金银花藤酒10？复方藤黄酒11？柳树皮酒12？神效酒13？瓜蒌甘草酒五、瘰疬1？刀豆鸭蛋酒2？内消酒3？玄参磁石酒4？白头翁酒5？老蛇盘酒6？海藻乌蛇酒7？蜘蛛浸酒8？瘰疬酒9？鳖甲酒六、瘿1？复方黄药子酒2？急性子酒3？柳根酒4？海藻昆布酒5？消瘿酒6？紫菜黄药酒七、乳腺炎1？大九股牛酒2？川楝子酒3？元宝草酒4？丝瓜络酒5？白果酒6？红砂糖酒7？牡荆子酒8？玫瑰煮酒9？苦地胆根酒10？菊花公英酒11？蛇蜕酒12？银花大黄酒13？银花公英酒14？紫花地丁酒15？蒲公英内服酒八、乳腺增生1？虎刺根酒2？鳝鱼皮酒九、痔疮1？二甲酒2？大茄子酒3？大黄地榆酒4？血三七酒5？花蝴蝶升麻酒6？苦参公英酒7？槐枝苍耳酒8？槐枝槐皮酒十、血栓闭塞性脉管炎1？阳和解凝酒2？爬山猴酒3？祛寒通络酒Ⅰ4？祛寒通络酒Ⅱ5？通利血脉酒6？温经通络酒第十节 妇科一、月经先期量多1？十全大补酒2？地榆酒3？铁树叶酒4？猪皮红糖酒5？黑豆淡菜酒二、月经后期量少1？月季红花酒2？木耳胡桃酒3？红花酒4？红茶葡萄酒5？佛手砂仁酒6？茴香桂枝酒7？桑椹黄精酒8？鹿角霜酒三、月经先后无定期1？八珍酒2？小茅香酒3？月季蒲黄酒4？当归加皮酒5？当归红花酒6？当归吴萸酒7？血藤归参酒8？花蝴蝶酒9？补气调经酒10？鸡血藤酒11？枸杞杜仲酒12？香附红花酒13？蓼根当归酒14？薯莨酒四、经期延长1？大黄酒2？丹参延胡酒五、经间期出血1？鸡血小麦酒2？茴香青皮酒3？棉花籽酒六、闭经1？大黄三七酒2？川芎鸡蛋酒3？马鞭草酒4？月季当归酒5？牛膝麻仁酒6？当归干漆酒7？牡丹月季酒8？参茸补血酒9？凌霄花酒10？桑椹红花酒11？益母黑豆酒12？益母当归酒13？紫河车酒14？蒲黄双豆酒七、痛经1？人参白芍酒2？三草双花酒3？山楂玫瑰酒4？丹参红花酒5？凤仙黑豆酒6？归芎郁金酒7？归附温经酒8？艾芎鸡蛋酒9？当归延胡酒10？当归黄芪酒11？红花苏木酒12？血竭艾芎酒13？茜草根酒14？荔枝苏木酒15？香附佩兰酒16？益母丹参酒17？鸭蛋姜片酒18？菖蒲活麻酒19？滋阴止痛酒20？黑豆鸡蛋酒八、经行乳房胀痛留行山甲酒九、更年期综合征黄精枸杞酒十、习惯性流产1？赤豆芽酒2？急性子酒十一、堕胎小产1？生地蒲黄酒2？蒲黄槐角酒十二、难产1？加味龟甲酒2？蛋黄酒3？蟹爪酒十三、产后血晕1？红花酒2？参附酒3？逐血调中酒十四、产后腹痛1？补中当归酒2？归红箭羽酒3？刘寄奴酒4？当归芍酒5？羌活酒6？芹菜籽酒7？鱼腥草酒8？益母草酒十五、产后痉症1？归芪酒2？白术黑豆酒3？当归芥穗酒4？鸡粪酒5？寄生黑豆酒十六、产后身痛1？双活人参酒2？僵蚕豆淋酒3？石斛附子酒4？独活肉桂酒5？黄芪防风酒6？黑豆大枣酒十七、产后便秘1？双仁酒2？加味四物酒十八、产后缺乳1？大枣糯米甜酒2？奶浆参酒3？米酒煮虾米4？红糖花生酒5？鱼灰酒6？瓜蒌酒7？涌泉酒8？通草钟乳酒9？猪蹄通草酒十九、产后胁痛1？芎归泻肝酒2？柴胡白术酒二十、产后虚弱1？五加皮酒2？当归续断酒3？杜仲肉桂酒4？灵芝龙眼酒5？金银花藤酒6？糯米米酒二十一、不孕1？二根茴香酒2？巴戟归芪酒3？延寿获嗣酒4？宜男酒5？养精种玉酒6？种玉酒7？草苁蓉酒8？排卵酒9？淫羊益母酒二十二、子宫脱垂1？八月札酒2？小金樱酒3？月季花红酒4？归芪升麻酒二十三、盆腔炎1？大蓟黄柏酒2？干姜白芍酒3？夏枯山甲酒4？淡菜韭菜酒5？槐米牡蛎酒二十四、子宫肌瘤1？山楂血藤酒2？当归蒲延酒二十五、子宫内膜异位症1？山楂红花酒2？当归肉桂酒3？乳香没药酒4？莪术失笑酒二十六、外阴瘙痒1？四子酒2？南木香酒第十一节 男科一、性早熟1？知柏生地酒2？柴丹栀子酒二、性欲减退1？双鞭壮阳酒2？羊藿木瓜酒3？明虾酒4？枸杞酒5？海狗肾酒三、遗精1？巴戟二子酒2？地黄枸杞酒3？补肾填精酒4？金樱子酒5？益肾固精酒6？滋阴止遗酒四、早泄1？三鞭双地酒2？巴戟熟地酒3？锁阳苁蓉酒五、阳痿1？人参鹿茸酒2？三石酒3？五子螵蛸酒4？巴戟牛膝酒5？仙茅羊藿酒6？羊肉木香酒7？羊藿金樱酒8？补肾壮阳酒9？补肾延寿酒10？刺猬皮酒11？板栗猪肾酒12？狗肾枸杞酒13？钟乳附子酒14？韭菜益智酒15？海马参茸酒16？雪莲虫草酒17？麻雀菟丝酒18？胡芦巴酒19？熟地枸杞酒20？醉虾酒21？震痿酒六、不育1？九子生精酒2？山萸菟丝酒3？生精酒4？多子酒5？补肾生精酒6？还春酒7？鸡睾酒8？青松龄酒9？种子酒10？胡桃四花酒11？续嗣降生酒12？鹿龄集酒13？毓麟酒七、前列腺炎1？二山芡实酒2？小茴香酒3？荠菜酒4？萆薢酒八、前列腺增生1？胡桃五味酒2？黄芪白芍酒九、阴囊湿疹1？五子黄柏酒2？苦参豨莶酒3？茼蒿酒十、疝气1？吴萸茴香酒2？花椒延胡酒3？闹羊紫荆酒4？茴香酒5？海藻酒6？橘荔双核酒第十二节 儿科一、小儿发育不良鹿茸山药酒二、小儿发热1？三味葱白酒2？羊脂大枣酒3？栀子桃仁酒三、小儿感冒1？吴萸白矾酒2？香薷苏叶酒3？葱实姜盐酒四、小儿暑疖1？公英外敷酒2？苦参大黄酒五、小儿遗尿1？鸡肠酒2？雄鸽当归酒六、小儿厌食栀子丁香酒七、小儿虫证1？百部酊2？青梅酒八、小儿泄泻1？红砂糖酒2？花椒肉桂酒3？香附酒九、小儿呕吐1？干生二姜酒2？生姜食醋酒十、小儿惊风1？牛黄钟乳酒2？清肝息风酒十一、小儿疳证白鱼竹茹酒十二、小儿癫痫1？防己莽草酒2？紫石铁精酒十三、小儿肺炎大黄芩连酒十四、小儿口腔溃疡三黄酒十五、新生儿硬肿症艾叶韭菜酒第十三节 骨伤科一、跌打损伤1？二花白矾酒2？三七跌打酒3？三皮郁金酒4？土鳖虫酒5？山姜茜草酒6？内伤白酒7？凤仙归尾酒8？少林八仙酒9？见血飞酒10？风伤擦剂11？生地桃仁酒12？刘寄奴酒13？当归芷竭酒14？红花苏木酒15？没药鸡子酒16？岩陀香藤酒17？玫瑰红花酒18？金雀花酒19？复方红花酒20？桃红活血酒21？散血破瘀酒22？紫金酒二、闪扭伤1？土鳖红花酒2？大黄红花酒3？闪挫止痛酒4？伤痛灵擦剂5？参胡杜仲酒6？按摩酒7？桂枝当归酒8？三棱跌打酒三、腰肌劳损1？益肾补骨酒2？扶芳藤酒四、骨折1？二乌透骨酒2？茴香樟脑酒3？桂红当归酒4？接骨续筋酒五、脱位1？壮筋补血酒2？整骨麻酒六、颈椎病1？龟甲蛤蚧酒2？茄皮鹿角酒七、肩周炎1？五虫酒2？消炎止痛酒3？漏肩风酒八、骨质增生1？二乌骨刺酒2？抗骨刺酒3？苁蓉骨刺酒4？复方当归酒5？威灵羊藿酒6？骨质增生酒7？强骨灵酒九、腰椎间盘突出症紫荆活血酒十、网球肘药棒酒十一、膝关节滑膜炎外敷白芷酒十二、关节疼痛1？当归松叶酒2？羊胫骨酒3？肉桂黄芪酒4？防风白术酒5？防风松叶酒6？防风茜草酒7？防风秦艽酒8？伸筋草酒9？抗风湿酒10？附子白术酒11？附子细辛酒12？参茸追风酒13？国公酒14？夜合枝酒15？茄根酒16？虎骨川芎酒17？虎骨白芍酒18？虎骨追风酒19？复方穿山龙酒20？活血舒筋酒21？独活南藤酒22？祛风调荣酒23？祛风酒24？络石仙茅酒25？胡蜂酒26？茵芋萆薢酒27？草乌威灵酒28？首乌地冬酒29？桑枝加皮酒30？海风藤酒31？海桐皮牛膝酒32？秦艽酒33？酒外擦方34？寄生骨痛酒35？排风酒36？麻黄骨痛酒十三、腰腿疼痛1？三黄参归酒2？三痹酒3？千年健酒4？千金杜仲酒5？川乌杜仲酒6？乌藤酒7？五加皮酒8？五积散酒9？巴戟牛膝酒10？牛蒡茵芋酒11？牛膝石斛酒12？牛膝参芪酒13？牛膝虎骨酒14？牛膝独活酒15？车前葱枣酒16？长松酒17？风湿骨痛酒18？加味地黄酒19？加味养生酒20？生地羌活酒21？白石英酒22？白花蛇酒23？延年石斛酒24？伸筋乌头酒25？杜仲加皮酒26？补肾酒27？参桂养荣酒28？狗脊马鞭酒29？狗脊黑豆酒30？肾着酒31？虎骨当归酒32？鱼鳔鹿角酒33？威灵仙酒34？独活当归酒35？独活参附酒36？珍珠腰痛酒37？胡桃全蝎酒38？茵芋薏苡酒39？草乌薏苡酒40？追风酒41？钟乳石酒42？首乌薏苡酒43？骨痛酒44？桐皮薏苡酒45？寄生地归酒46？甜瓜子酒47？萆薢除湿酒48？萆薢附子酒49？鹿角杜仲酒50？鹿角腰痛酒十四、骨质疏松症1？人参枸杞酒2？当归枸杞酒十五、外伤出血1？白背三七酒2？红旱莲酒十六、破伤风1？山甲酒2？天麻四虫酒3？威灵独蒜酒4？雀屎酒5？蜜蜡酒十七、外伤性截瘫1？山虎洋参酒2？截瘫药酒十八、冻伤1？丁香酒2？二乌茴香酒3？二椒樟脑酊4？当归留行酊5？红花干姜酒6？防冻酊十九、疯狗咬伤1？七星剑酒2？华山矾酒3？板蓝根酒4？草兰根酒5？荔枝草酒二十、水火烫伤1？大黄槐角酒2？鸡蛋清外涂酒3？复方五加皮酒4？复方芩茶酒5？烧伤酒6？烧伤酒方17？烧伤酒方28？莲榆酒二十一、毒蛇咬伤1？九龙吐珠酒2？复方扁豆酒3？热酒4？救必应酒5？蛇伤酒第四节 皮肤科一、稻田性皮炎1？九里香酒2？五倍白矾酒3？樟脑冰片酊二、神经性皮炎1？土苯酚2？外擦酒3？红花冰片酒4？细辛姜桂酒5？苦参长卿酒6？复方斑蝥酒7？神经性皮炎酒三、脂溢性皮炎1？白鲜生地酒2？皮炎液3？苦参凤眼酒四、虫咬皮炎1？丁香薄荷酊2？重楼酒五、毛囊炎藤黄苦参酒六、湿疹1？土槿皮酒2？止痒酒Ⅰ3？蛇床苦参酒4？黄柏地肤酒七、荨麻疹1？白茄根酒2？石南肤子酒3？红花乌梅酒4？松叶酒5？枳壳秦艽酒6？浮萍酒7？蜂房苦参酒8？蝉蜕糯米甜酒八、白癜风1？乌蛇酒2？无花果酒3？白癜风酒4？补骨前胡酊5？补骨密陀酊6？菟丝子酊九、牛皮癣1？马钱二黄酒2？五蛇酒3？牛皮癣酒4？四虎二黄酒5？复方洋金酒6？喜树酚7？斑蝥青皮酒8？蜈蚣蛤蟆酒9？蝮蛇人参酒10？癣药酒十、痱子1？三黄参冰酊2？地龙茶叶酊十一、疥疮1？水菖蒲酒2？灭疥灵3？白鲜百部酒4？百部蛇床酊5？龟甲酒十二、鹅掌风1？一号癣药水2？生姜浸酒3？当归百部酒4？羊蹄草酒5？复方土槿酊十三、足癣硝银白矾酊十四、癣类杂病1？一号癣药水2？二号癣药水3？止痒酒4？去癣酒5？甘草升麻酒6？百部大风酒7？克癣液8？参白癣药水9？苦参鲜皮酒10？复方雪花酒11？复方蟾蜍酒12？鸦胆百部酒13？斑黄酒十五、痤疮1？大黄冰片酊2？冬瓜酒3？苦参百部酊4？重楼酒十六、带状疱疹1？三花止痒酊2？石膏酒3？矾冰酒4？金银花酒5？南星重楼酒6？银菊凤床酒7？雄黄酒十七、皮肤瘙痒1？百部草酊2？枳实酒3？活血止痒酒4？神蛇酒5？黄芪续断酒6？蝉蜕鲜皮酒十八、虱1？止痒酒Ⅱ2？灭虱酒3？百部槟榔酒4？除虱酒十九、疣1？了哥王酒2？复方乌梅酒3？洗瘊酒4？骨碎补酒5？消疣酒6？蝉蜕地肤酒二十、酒渣鼻1？轻硫酊2？麻黄宣肺酒二十一、梅毒1？十味生地酒2？金蝉脱壳酒3？解毒消疮酒二十二、褥疮当归红花酊二十三、赤游风1？枳壳酒2？恶实根酒二十四、硬皮病1？红花桂枝酒2？芪归黄鳝酒3？附子羊肉酒4？参芪鹿蓉酒二十五、手脱皮老姜酒二十六、狐臭1？丁香白芷酊2？狐臭酒3？洗必泰酊4？藁本苦酒二十七、鸡眼1？补骨脂酊2？鸡眼酒膏二十八、皮肤皲裂当归荆芥酒二十九、脚气病1？丹参石斛酒2？乌药酒3？牛蒡断桑酒4？牛膝丹参酒5？生地牛蒡酒6？松节地黄酒第五节 眼科一、流泪症1？杞菊地冬酒2？杞菊麦冬酒3？菊花地骨酒二、急性结膜炎1？五参酒2？桑螵蛸酒3？蔓荆子酒三、眼睛干涩1？枸杞麻仁酒2？枸杞地术酒四、病毒性角膜炎加味修肝酒五、白内障1？四味平补酒2？驻景酒3？神效退翳酒4？草决明目酒六、视力减退1？枸杞生地酒2？健阳酒3？菖蒲白术酒4？黄精枸杞酒第十六节 耳鼻喉科及口腔科一、脓耳1？马钱冰片酒2？黄连冰片酒二、耳鸣1？木香怡神酒2？穿破菖蒲酒3？桑椹柠檬酒4？磁石熟地酒5？聪耳磁石酒三、耳聋1？天花粉酒2？百岁长寿酒3？苍耳愈聋酒4？磁石山萸酒四、鼻出血1？莱菔酒2？黑栀子酒五、鼻炎1？芫花根酊2？辛夷白芷酒3？滴鼻液六、鼻窦炎1？苍耳子酒2？蜂蛹酒七、扁桃体炎1？蛇胆酒2？橄榄青黛酒八、慢性咽炎1？人乳酒2？朱砂桂枝酒九、声音嘶哑1？西洋参酒2？芥子酒3？槐白皮酒4？蜜膏酒十、咽喉异物梗阻1？艾叶酒2？威灵仙酒十一、牙痛1？川乌蜂房酒2？乌头独活酒3？止痛酒4？四味茶叶酒5？白矾藜芦酒6？松叶辛芎酒7？松节细辛酒8？细辛柳皮酒9？郁李根酒10？齿痛酒11？枳壳根酒十二、牙齿松动1？三皮酒2？乌头郁李酒十三、拔牙麻醉1？乌头羊金酒2？细辛菝葜酒3？复方白茄根酒十四、口舌生疮1？半夏酒2？连柏栀子酒第十七节 肿瘤科一、鼻咽癌天葵子酒二、肺癌1？石蝉草酒2？一枝香酒三、乳腺癌1？三橘酒2？角莲闹羊酒3？南瓜蒂酒4？胡桃枝酒5？浙贝胡桃酒6？荷叶蒂酒7？鹿茸草酒8？槐花酒9？鲜柚酒10？蟹壳酒四、膀胱癌淫羊藿酒五、子宫颈癌1？秤砣梨酒2？黄药子酒3？鳖甲蟾蜍酒六、子宫内膜癌海马蜈蚣酒七、卵巢癌水蛭酒八、阴茎癌蟾蜍酒九、甲状腺癌消瘿抗癌酒十、恶性淋巴瘤八角莲酒十一、白血病1？紫杉酒2？鳗鲡鱼酒十二、癌症疼痛1？止痛擦剂2？水红花子酒3？黄药毒虫酒4？麝香冰片酒5？麝香夜牛酒第十八节 其他科一、汗证1？黄芪五味酒2？黄芪党参酒二、中暑1？芝麻酒2？杨梅浸酒3？苹果酒三、食物中毒1？芦苇根酒2？苦参甘草酒3？盐酒 第三章 秘传家用解酒便方 1？丁香砂仁散2？二葛二花丹3？山楂砂糖汁4？干良双姜散5？乌梅砂糖汁6？五鲜汁7？火腿椒姜汤8？四鲜赤豆汤9？甘草茶10？生姜乌梅茶11？生姜食醋茶12？白砂糖汤13？白果解酒丹14？白蔻丁香散15？石膏葛根汤16？龙眼大枣汤17？冰糖银耳汤18？红枣绿豆汤19？老菱角汤20？西瓜牛奶汁21？西瓜番茄汁22？西瓜翠衣汤23？杏仁砂糖茶24？杨梅砂糖汁25？良姜茴麻汤26？芜菁根散27？芹菜砂糖汁28？陈皮砂糖茶29？咖啡茶30？枇杷竹叶茶31？茅桑二根汤32？厚朴麦芽汤33？扁豆汁34？柑橘柠檬茶35？柠檬砂糖汁36？柿叶茶37？活命醒酒丹38？济生百杯丸39？砂仁葛根散40？草豆蔻汤41？草莓砂糖汁42？香薷扁豆散43？桑菊枸杞茶44？盐糖菠萝汁45？莲藕银耳汤46？鸭梨荸藕汁47？绿芷麝冰散48？绿豆甘草汤49？绿豆汤50？绿豆花汤51？菊花绿茶煎52？菠萝汤53？萝卜砂糖汁54？萝卜乳蛋汁55？银花砂糖茶56？番茄牛奶汁57？番茄汁58？紫苏生姜茶59？紫金锭60？紫葡萄汁61？葛花白药散62？葛花汤63？葛花砂仁丸64？葛花茶65？葡萄乳檬汁66？槟榔茶67？酸梅汤68？鲜藕汁69？鲜橘汁70？樟叶葛花散71？樱桃砂糖汁72？橄榄草盐汤73？橘莲梅枣汤74？薄荷绿豆汤75？螺蚌葱豉汤 第四章 药酒知识 第一节 药酒的起源与发展第二节 药酒的作用与特点一、作用（一）营养机体（二）促进消化（三）改善循环（四）畅达情志（五）延年益寿二、特点（一）配制简单（二）加减灵活（三）应用广泛（四）滋味可口（五）吸收迅速（六）药效较强（七）服用便捷（八）便于储存第三节 制作药酒的准备一、药酒配方二、入酒药物三、基质酒类四、制酒容器五、制酒时令第四节 制作药酒的方法一、煎煮法二、浸渍法（一）冷浸法（二）热浸法三、酿制法四、渗漉法第五节 药酒的服用方法一、选准药酒种类二、遵守服用原则（一）适量（二）适时（三）适温（四）内外有别三、避免服用禁忌（一）药物禁忌（二）病症禁忌（三）生理禁忌（四）年龄禁忌（五）饮食禁忌（六）起居禁忌四、注意服用反应第六节 药酒的储存与保管"}
